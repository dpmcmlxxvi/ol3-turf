!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).ol3turf=e()}(this,function(){"use strict";var t=function(t){return t.utils.extend=function(e,o){void 0!==e&&void 0!==o&&Object.keys(e).forEach(function(n){const r=e[n];if(null!==r&&"object"==typeof r)return void 0===o[n]&&(o[n]={}),void t.utils.extend(r,o[n]);o[n]=r})},t.utils.getClass=function(e,o){return"."+t.utils.getName(e,o)},t.utils.getCollection=function(t,e,o){const n=t.getFeatures();if(n.features.length<e)throw new Error("Number of features less than "+e);if(n.features.length>o)throw new Error("Number of features greater than "+o);return n},t.utils.getControlInput=function(t,e,o,n){return{title:o,type:"input",attributes:{name:t,onclick:e,type:"submit",value:n}}},t.utils.getControlNumber=function(t,e,o,n,r,i,l){return{title:e,type:"input",attributes:{id:t,name:t,min:i,max:l,step:r,title:o,type:"number",value:n}}},t.utils.getControlSelect=function(t,e,o){return{title:e,type:"select",attributes:{id:t,name:t},options:o}},t.utils.getControlText=function(t,e,o){return{title:e,type:"input",attributes:{id:t,name:t,title:o,type:"text"}}},t.utils.getElement=function(e,o,n){return e+"[name='"+t.utils.getName(o,n)+"']"},t.utils.getFeatures=function(t,e,o,n){const r=[];if(e.features.forEach(function(e){t.indexOf(e.geometry.type)>-1&&r.push(e)}),r.length<o)throw new Error("Number of '"+t+"' features less than "+o);if(r.length>n)throw new Error("Number of '"+t+"' features greater than "+n);return r},t.utils.getFormArray=function(e,o){const n=t.utils.getFormString(e,o),r=[];return n.split(",").forEach(function(t){const e=parseFloat(t);if(Number(e)!==e)throw new Error("Invalid "+o);r.push(e)}),r},t.utils.getFormInteger=function(t,e){const o=parseInt(document.getElementById(t).value,10);if(Number(o)!==o)throw new Error("Invalid "+e);return o},t.utils.getFormNumber=function(t,e){const o=parseFloat(document.getElementById(t).value);if(Number(o)!==o)throw new Error("Invalid "+e);return o},t.utils.getFormString=function(t,e){const o=document.getElementById(t).value;if(!o||!o.trim())throw new Error("Invalid "+e);return o},t.utils.getId=function(e,o){return"#"+t.utils.getName(e,o)},t.utils.getLines=function(e,o,n){return t.utils.getFeatures(["LineString"],e,o,n)},t.utils.getName=function(t,e){void 0===e&&(e="ol3-turf");let o=e;return t.forEach(function(t){o+="-"+t}),o},t.utils.getOptionsGeometry=function(){return[{text:"Points",attributes:{selected:"selected",value:"points"}},{text:"Polygons",attributes:{value:"polygons"}}]},t.utils.getOptionsGrids=function(){return[{text:"Hexagons",attributes:{selected:"selected",value:"hexagons"}},{text:"Triangles",attributes:{value:"triangles"}}]},t.utils.getOptionsQuality=function(){return[{text:"High",attributes:{value:"high"}},{text:"Low",attributes:{selected:"selected",value:"low"}}]},t.utils.getOptionsUnits=function(){return[{text:"degrees",attributes:{value:"degrees"}},{text:"kilometers",attributes:{selected:"selected",value:"kilometers"}},{text:"miles",attributes:{value:"miles"}},{text:"radians",attributes:{value:"radians"}}]},t.utils.getPoints=function(e,o,n){return t.utils.getFeatures(["Point"],e,o,n)},t.utils.getPolygons=function(e,o,n){return t.utils.getFeatures(["Polygon"],e,o,n)},t.utils.getPolygonsAll=function(e,o,n){return t.utils.getFeatures(["Polygon","MultiPolygon"],e,o,n)},t.utils}({utils:{}}||{});var e=function(t){return function(e,o,n,r){let i=null;if(null===(i="string"==typeof e?document.getElementById(e):e))throw new Error("ol3turf.form: Parent element not found.");if(void 0===o)throw new Error("ol3turf.form: Form ID not provided.");if(void 0===n)throw new Error("ol3turf.form: Form controls not provided.");const l=document.createElement("form");l.id=o,l.className="ol3-turf-form ol-unselectable ol-control",l.setAttribute("onsubmit","return false;"),t.utils.extend(r,l);const s=document.createElement("table");return s.className="ol3-turf-form-table",n.forEach(function(e){const o=document.createElement("tr");o.className="ol3-turf-form-row";const n=document.createElement("th");n.innerHTML=e.title,n.className="ol3-turf-form-header",o.appendChild(n);const r=document.createElement("td");r.className="ol3-turf-form-data";const i=document.createElement(e.type);i.className="ol3-turf-form-input",t.utils.extend(e.attributes,i),"select"===e.type&&(i.className="ol3-turf-form-select",void 0!==e.options&&e.options.forEach(function(e){const o=document.createElement("option");o.innerHTML=e.text,o.className="ol3-turf-form-option",t.utils.extend(e.attributes,o),i.appendChild(o)})),r.appendChild(i),o.appendChild(r),s.appendChild(o)}),l.appendChild(s),i.appendChild(l),l}}({utils:t}||{});var o=function(t){return function e(o,n,r,i){const l="ol3-turf-popup",s=document.getElementById(l);let u=null;if(null!==s&&null!==(u=s.parentNode)&&u.removeChild(s),null==o)return;let c=document.body;null!=r&&(c=r);const a=document.createElement("div");a.className=l,a.id=l,t.utils.extend(i,a);const f=document.createElement("div");f.className="ol3-turf-popup-message",f.innerHTML=o;const g=document.createElement("button");g.className="ol3-turf-popup-button",g.innerHTML="OK",g.onclick=function(){null!=n&&n(),e()},g.type="button";const p=document.createElement("div");return p.className="ol3-turf-popup-button-container",p.appendChild(g),a.appendChild(f),a.appendChild(p),c.appendChild(a),a}}({utils:t}||{});var n=function(t){function e(t){const e=t.getBoundingClientRect();let o=0,n=0;do{n+=t.offsetTop||0,o+=t.offsetLeft||0,t=t.offsetParent}while(t);return{bottom:n+e.height,height:e.height,left:o,right:o+e.width,top:n,width:e.width}}const o=function(t){const e=t||{},o=this;this.button=document.createElement("button"),this.button.addEventListener("click",this.run.bind(this),!1),this.button.addEventListener("touchstart",this.run.bind(this),!1),Object.keys(e).forEach(function(t){o.button[t]=e[t]}),this.element=document.createElement("div"),this.element.className="ol3-turf-control",this.element.appendChild(this.button),this.toolbar=null,this.form=null,this.prefix="ol3-turf"};return o.prototype.action=function(){throw new Error("Control action not implemented!")},o.prototype.addFeatures=function(t){const e=this.getProjectionMap(),o=this.getProjectionTurf(),n=new ol.format.GeoJSON,r=new ol.layer.Vector({source:new ol.source.Vector({features:n.readFeatures(t,{dataProjection:o,featureProjection:e})})});this.getMap().addLayer(r)},o.prototype.getFeatures=function(){const t=this.getProjectionMap(),e=this.getProjectionTurf(),o=new ol.format.GeoJSON,n=[];return this.getSelectors().forEach(function(r){r.getFeatures().forEach(function(r){n.push(o.writeFeatureObject(r,{dataProjection:e,featureProjection:t}))})}),turf.featureCollection(n)},o.prototype.getFormPosition=function(t){const o=e(this.button),n=e(t),r=e(this.getMap().getTargetElement()),i=e(this.toolbar.ol3turf.element);return n.top=o.top,n.left=o.left,function(t,e,o,n){o.width>o.height?t.top=function(t,e,o,n){let r=0,i=o.bottom;return i+=r=n.top-e.top>.5*e.height?-o.height-t.height+-n.height/2:n.height/2}(t,e,o,n):t.left=function(t,e,o,n){let r=0,i=o.left+o.width;return i+=r=n.left-e.left>.5*e.width?-o.width-t.width+-n.width/2:n.width/2}(t,e,o,n)}(n,r,i,o),function(t,e,o){const n=e.right-(t.left+t.width),r=t.left+n;n<0&&r>0&&(t.left+=n-o.width/2)}(n,r,o),function(t,e,o){const n=e.bottom-(t.top+t.height),r=t.top+n;n<0&&r>0&&(t.top+=n-o.height/2)}(n,r,o),n.top-=r.top,n.left-=r.left,{top:n.top,left:n.left}},o.prototype.getMap=function(){if(null===this.toolbar)return null;return this.toolbar.getMap()},o.prototype.getProjectionMap=function(){let t="EPSG:3857";const e=this.getMap().getView().getProjection();return void 0!==e&&(t=e.getCode()),t},o.prototype.getProjectionTurf=function(){return"EPSG:4326"},o.prototype.getSelectors=function(){const t=[],e=this.getMap();return null===e?t:(e.getInteractions().forEach(function(e){e instanceof ol.interaction.Select&&t.push(e)}),t)},o.prototype.run=function(){try{this.action()}catch(t){this.showMessage(t.message)}},o.prototype.showForm=function(e,o){const n=this.toolbar.element.parentNode;if(null!==this.form&&(n.removeChild(this.form),this.form=null),void 0===e)return;void 0===o&&(o="ol3-turf-form"),this.form=t.form(n,o,e,{style:{visibility:"hidden"}});const r=this.getFormPosition(this.form);this.form.style.left=r.left+"px",this.form.style.top=r.top+"px",this.form.style.visibility="visible"},o.prototype.showMessage=function(e){const o=this.toolbar.ol3turf.element.parentNode,n=t.popup(e,null,o,{style:{visibility:"hidden"}}),r=this.getFormPosition(n);n.style.left=r.left+"px",n.style.top=r.top+"px",n.style.visibility="visible"},o.create=function(e,n,r,i,l){const s=t.utils.getName([r]),u=t.utils.getName(["control","button"]),c=t.utils.getName([r],n),a=new o({className:s+" "+u,id:c,title:i});return a.prefix=n,a.toolbar=e,a.action=function(){return l(a)},a},o}({Control:n,form:e,popup:o,utils:t}||{});var r=function(t){const e="along",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"distance"],o.prefix),i=t.utils.getName([e,"form"],o.prefix),l=t.utils.getName([e,"ok"],o.prefix),s=t.utils.getName([e,"units"],o.prefix);const u=[t.utils.getControlNumber(r,"Distance","Distance along the line","0","any","0"),t.utils.getControlSelect(s,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{const n=t.utils.getCollection(o,1,1),i=t.utils.getLines(n,1,1)[0],l=t.utils.getFormNumber(r,"distance"),u=t.utils.getFormString(s,"units"),c=turf.along(i,l,u);o.showForm();const a={line:i,distance:l,units:u};o.toolbar.ol3turf.handler.callback(e,c,a)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(u,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Find point along line at given distance",o)}}}({Control:n,utils:t}||{});var i=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1/0),n=turf.area(o),r={input:o};e.toolbar.ol3turf.handler.callback("area",n,r)};return{create:function(o,n){return t.Control.create(o,n,"area","Measure Area",e)}}}({Control:n,utils:t}||{});var l=function(t){const e=function(e){const o=t.utils.getCollection(e,2,2),n=t.utils.getPoints(o,2,2),r=n[0],i=n[1],l=turf.bearing(r,i),s={start:r,end:i};e.toolbar.ol3turf.handler.callback("bearing",l,s)};return{create:function(o,n){return t.Control.create(o,n,"bearing","Measure Bearing",e)}}}({Control:n,utils:t}||{});var s=function(t){const e="bezier",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"form"],o.prefix),i=t.utils.getName([e,"ok"],o.prefix),l=t.utils.getName([e,"resolution"],o.prefix),s=t.utils.getName([e,"sharpness"],o.prefix);const u=[t.utils.getControlNumber(l,"Resolution","Time between points (milliseconds)","10000","any","0"),t.utils.getControlNumber(s,"Sharpness","Measure of how curvy the path should be between splines","0.85","0.01","0","1"),t.utils.getControlInput(i,function(){try{const n=t.utils.getCollection(o,1,1),r=t.utils.getLines(n,1,1)[0],i=t.utils.getFormNumber(l,"resolution"),u=t.utils.getFormNumber(s,"sharpness"),c=turf.bezier(r,i,u);o.showForm();const a={line:r,resolution:i,sharpness:u};o.toolbar.ol3turf.handler.callback(e,c,a)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(u,r)};return{create:function(n,r){return t.Control.create(n,r,e,"Create bezier curve of line",o)}}}({Control:n,utils:t}||{});var u=function(t){const e="buffer",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"distance"],o.prefix),i=t.utils.getName([e,"form"],o.prefix),l=t.utils.getName([e,"ok"],o.prefix),s=t.utils.getName([e,"units"],o.prefix);const u=[t.utils.getControlNumber(r,"Distance","Distance to draw the buffer","0","any","0"),t.utils.getControlSelect(s,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{const n=t.utils.getCollection(o,1,1/0),i=t.utils.getFormNumber(r,"distance"),l=t.utils.getFormString(s,"units"),u=turf.buffer(n,i,l);o.showForm();const c={feature:n,distance:i,unit:l};o.toolbar.ol3turf.handler.callback(e,u,c)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(u,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Buffer feature by given radius",o)}}}({Control:n,utils:t}||{});var c=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1/0),n=turf.center(o),r={features:o};e.toolbar.ol3turf.handler.callback("center",n,r)};return{create:function(o,n){return t.Control.create(o,n,"center","Measure Center",e)}}}({Control:n,utils:t}||{});var a=function(t){const e="center-of-mass",o=function(o){const n=t.utils.getCollection(o,1,1/0),r=turf.centerOfMass(n),i={features:n};o.toolbar.ol3turf.handler.callback(e,r,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Measure center of mass",o)}}}({Control:n,utils:t}||{});var f=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1/0),n=turf.centroid(o),r={features:o};e.toolbar.ol3turf.handler.callback("centroid",n,r)};return{create:function(o,n){return t.Control.create(o,n,"centroid","Measure Centroid",e)}}}({Control:n,utils:t}||{});var g=function(t){const e="circle",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"form"],o.prefix),i=t.utils.getName([e,"ok"],o.prefix),l=t.utils.getName([e,"radius"],o.prefix),s=t.utils.getName([e,"steps"],o.prefix),u=t.utils.getName([e,"units"],o.prefix);const c=[t.utils.getControlNumber(l,"Radius","Radius of the circle","0","any","0"),t.utils.getControlNumber(s,"Steps","Number of steps around circle","3","1","3"),t.utils.getControlSelect(u,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(i,function(){try{const n=t.utils.getCollection(o,1,1),r=t.utils.getPoints(n,1,1)[0],i=t.utils.getFormNumber(l,"radius"),c=t.utils.getFormNumber(s,"steps"),a=t.utils.getFormString(u,"units"),f=turf.circle(r,i,c,a);o.showForm();const g={center:r,radius:i,steps:c,units:a};o.toolbar.ol3turf.handler.callback(e,f,g)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(c,r)};return{create:function(n,r){return t.Control.create(n,r,e,"Create circle",o)}}}({Control:n,utils:t}||{});var p=function(t){const e="collect",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"form"],o.prefix),i=t.utils.getName([e,"in","property"],o.prefix),l=t.utils.getName([e,"ok"],o.prefix),s=t.utils.getName([e,"out","property"],o.prefix);const u=[t.utils.getControlText(i,"In Property","Property to be nested from"),t.utils.getControlText(s,"Out Property","Property to be nested into"),t.utils.getControlInput(l,function(){try{const n=t.utils.getCollection(o,2,1/0),r=t.utils.getPoints(n,1,n.features.length-1),l=n.features.length-r.length,u=t.utils.getPolygons(n,l,l),c=t.utils.getFormString(i,"In-Property"),a=t.utils.getFormString(s,"Out-Property"),f=turf.featureCollection(u),g=turf.featureCollection(r),p=turf.collect(f,g,c,a);o.showForm();const m={polygons:f,points:g,inProperty:c,outProperty:a};o.toolbar.ol3turf.handler.callback(e,p,m)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(u,r)};return{create:function(n,r){return t.Control.create(n,r,e,"Collect points within polygons",o)}}}({Control:n,utils:t}||{});var m=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1/0),n=turf.combine(o),r={fc:o};e.toolbar.ol3turf.handler.callback("combine",n,r)};return{create:function(o,n){return t.Control.create(o,n,"combine","Combine feature collection",e)}}}({Control:n,utils:t}||{});var h=function(t){const e="concave",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"form"],o.prefix),i=t.utils.getName([e,"max","edge"],o.prefix),l=t.utils.getName([e,"ok"],o.prefix),s=t.utils.getName([e,"units"],o.prefix);const u=[t.utils.getControlNumber(i,"Max Edge Size","Maximum size of an edge necessary for part of the hull to become concave","0","any","0"),t.utils.getControlSelect(s,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{const n=t.utils.getCollection(o,3,1/0),r=n.features.length,l=t.utils.getPoints(n,r,r),u=t.utils.getFormNumber(i,"Max Edge"),c=t.utils.getFormString(s,"units"),a=turf.featureCollection(l),f=turf.concave(a,u,c);o.showForm();const g={points:a,maxEdge:u,units:c};o.toolbar.ol3turf.handler.callback(e,f,g)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(u,r)};return{create:function(n,r){return t.Control.create(n,r,e,"Create Concave Hull",o)}}}({Control:n,utils:t}||{});var d=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1/0),n=turf.convex(o),r={featurecollection:o};e.toolbar.ol3turf.handler.callback("convex",n,r)};return{create:function(o,n){return t.Control.create(o,n,"convex","Create Convex Hull",e)}}}({Control:n,utils:t}||{});var C=function(t){const e="destination",o=function(o){const n=t.utils.getName([e,"bearing"],o.prefix),r=t.utils.getName([e,"cancel"],o.prefix),i=t.utils.getName([e,"distance"],o.prefix),l=t.utils.getName([e,"form"],o.prefix),s=t.utils.getName([e,"ok"],o.prefix),u=t.utils.getName([e,"units"],o.prefix);const c=[t.utils.getControlNumber(n,"Bearing","Bearing angle (degrees)","0","any","-180","180"),t.utils.getControlNumber(i,"Distance","Distance from the starting point","0","any","0"),t.utils.getControlSelect(u,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(s,function(){try{const r=t.utils.getCollection(o,1,1),l=t.utils.getPoints(r,1,1)[0],s=t.utils.getFormNumber(i,"distance"),c=t.utils.getFormNumber(n,"bearing"),a=t.utils.getFormString(u,"units"),f=turf.destination(l,s,c,a);o.showForm();const g={from:l,distance:s,bearing:c,units:a};o.toolbar.ol3turf.handler.callback(e,f,g)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(r,function(){o.showForm()},"","Cancel")];o.showForm(c,l)};return{create:function(n,r){return t.Control.create(n,r,e,"Find destination point from given point",o)}}}({Control:n,utils:t}||{});var b=function(t){const e=function(e){const o=t.utils.getCollection(e,2,2),n=t.utils.getPolygons(o,2,2),r=n[0],i=n[1],l=turf.difference(r,i),s={poly1:r,poly2:i};e.toolbar.ol3turf.handler.callback("difference",l,s)};return{create:function(o,n){return t.Control.create(o,n,"difference","Create Difference Polygon",e)}}}({Control:n,utils:t}||{});var y=function(t){const e="distance",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"form"],o.prefix),i=t.utils.getName([e,"ok"],o.prefix),l=t.utils.getName([e,"units"],o.prefix);const s=[t.utils.getControlSelect(l,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(i,function(){try{const n=t.utils.getCollection(o,2,2),r=t.utils.getPoints(n,2,2),i=r[0],s=r[1],u=t.utils.getFormString(l,"units"),c=turf.distance(i,s,u);o.showForm();const a={from:i,to:s,units:u};o.toolbar.ol3turf.handler.callback(e,c,a)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(s,r)};return{create:function(n,r){return t.Control.create(n,r,e,"Find distance between points",o)}}}({Control:n,utils:t}||{});var x=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1/0),n=turf.envelope(o),r={fc:o};e.toolbar.ol3turf.handler.callback("envelope",n,r)};return{create:function(o,n){return t.Control.create(o,n,"envelope","Measure Envelope",e)}}}({Control:n,utils:t}||{});var N=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1/0),n=turf.explode(o),r={geojson:o};e.toolbar.ol3turf.handler.callback("explode",n,r)};return{create:function(o,n){return t.Control.create(o,n,"explode","Explode feature collection",e)}}}({Control:n,utils:t}||{});var w=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1/0),n=turf.flip(o),r={input:o};e.toolbar.ol3turf.handler.callback("flip",n,r)};return{create:function(o,n){return t.Control.create(o,n,"flip","Flip features coordinates",e)}}}({Control:n,utils:t}||{});var F=function(t){const e="hex-grid",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"cell-size"],o.prefix),i=t.utils.getName([e,"form"],o.prefix),l=t.utils.getName([e,"type"],o.prefix),s=t.utils.getName([e,"ok"],o.prefix),u=t.utils.getName([e,"units"],o.prefix);const c=[t.utils.getControlNumber(r,"Cell Size","Dimension of cell","1","any","0"),t.utils.getControlSelect(u,"Units",t.utils.getOptionsUnits()),t.utils.getControlSelect(l,"Type",t.utils.getOptionsGrids()),t.utils.getControlInput(s,function(){try{const n=t.utils.getCollection(o,1,1/0),i=t.utils.getFormNumber(r,"cell size"),s=t.utils.getFormString(l,"grid type"),c=t.utils.getFormString(u,"units"),a="triangles"===s,f=turf.bbox(n),g=turf.hexGrid(f,i,c,a);o.showForm();const p={bbox:f,cellSize:i,units:c,triangles:a};o.toolbar.ol3turf.handler.callback(e,g,p)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(c,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Generate Hex Grid",o)}}}({Control:n,utils:t}||{});var v=function(t){const e=function(e){const o=t.utils.getCollection(e,2,2),n=t.utils.getPoints(o,1,1),r=t.utils.getPolygonsAll(o,1,1),i=n[0],l=r[0],s=turf.inside(i,l),u={point:i,polygon:l};e.toolbar.ol3turf.handler.callback("inside",s,u)};return{create:function(o,n){return t.Control.create(o,n,"inside","Point inside polygon?",e)}}}({Control:n,utils:t}||{});var k=function(t){const e=function(e){const o=t.utils.getCollection(e,2,2),n=t.utils.getPolygonsAll(o,2,2),r=n[0],i=n[1],l=turf.intersect(r,i),s={poly1:r,poly2:i};e.toolbar.ol3turf.handler.callback("intersect",l,s)};return{create:function(o,n){return t.Control.create(o,n,"intersect","Create Intersection Polygon",e)}}}({Control:n,utils:t}||{});var P=function(t){const e="isolines",o=function(o){const n=t.utils.getName([e,"breaks"],o.prefix),r=t.utils.getName([e,"cancel"],o.prefix),i=t.utils.getName([e,"form"],o.prefix),l=t.utils.getName([e,"ok"],o.prefix),s=t.utils.getName([e,"resolution"],o.prefix),u=t.utils.getName([e,"z"],o.prefix);const c=[t.utils.getControlNumber(s,"Resolution","Resolution of the underlying grid","1","any","0.01"),t.utils.getControlText(u,"Z Property","Property name in points from which z-values will be pulled"),t.utils.getControlText(n,"Breaks","Comma separated list of where to draw contours"),t.utils.getControlInput(l,function(){try{const r=t.utils.getCollection(o,1,1/0),i=t.utils.getFormArray(n,"breaks"),l=t.utils.getFormNumber(s,"resolution"),c=t.utils.getFormString(u,"z"),a=turf.isolines(r,c,l,i);o.showForm();const f={points:r,z:c,resolution:l,breaks:i};o.toolbar.ol3turf.handler.callback(e,a,f)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(r,function(){o.showForm()},"","Cancel")];o.showForm(c,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Create isolines",o)}}}({Control:n,utils:t}||{});var S=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1),n=t.utils.getPolygons(o,1,1)[0],r=turf.kinks(n);if(0===r.features.length)throw new Error("No kinks found.");const i={polygon:n};e.toolbar.ol3turf.handler.callback("kinks",r,i)};return{create:function(o,n){return t.Control.create(o,n,"kinks","Create polygon self-intersections",e)}}}({Control:n,utils:t}||{});var I=function(t){const e="line-distance",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"form"],o.prefix),i=t.utils.getName([e,"ok"],o.prefix),l=t.utils.getName([e,"units"],o.prefix);const s=[t.utils.getControlSelect(l,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(i,function(){try{const n=t.utils.getCollection(o,1,1/0),r=t.utils.getFormString(l,"units"),i=turf.lineDistance(n,r);o.showForm();const s={line:n,units:r};o.toolbar.ol3turf.handler.callback(e,i,s)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(s,r)};return{create:function(n,r){return t.Control.create(n,r,e,"Measure Length",o)}}}({Control:n,utils:t}||{});var E=function(t){const e="line-slice-along",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"form"],o.prefix),i=t.utils.getName([e,"ok"],o.prefix),l=t.utils.getName([e,"start"],o.prefix),s=t.utils.getName([e,"stop"],o.prefix),u=t.utils.getName([e,"units"],o.prefix);const c=[t.utils.getControlNumber(l,"Start","Starting distance along the line","0","any","0"),t.utils.getControlNumber(s,"Stop","Stoping distance along the line","0","any","0"),t.utils.getControlSelect(u,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(i,function(){try{const n=t.utils.getCollection(o,1,1),r=t.utils.getLines(n,1,1)[0],i=t.utils.getFormNumber(l,"start"),c=t.utils.getFormNumber(s,"stop");if(!0!=i<c)throw new Error("Start must be less than stop");const a=t.utils.getFormString(u,"units"),f=turf.lineDistance(r,a);if(i>f)throw new Error("Start must be less than line length");if(c>f)throw new Error("Stop must be less than line length");const g=turf.lineSliceAlong(r,i,c,a);o.showForm();const p={line:r,start:i,stop:c,units:a};o.toolbar.ol3turf.handler.callback(e,g,p)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(c,r)};return{create:function(n,r){return t.Control.create(n,r,e,"Create line slice",o)}}}({Control:n,utils:t}||{});var M=function(t){const e=function(e){const o=t.utils.getCollection(e,2,2),n=t.utils.getPoints(o,2,2),r=n[0],i=n[1],l=turf.midpoint(r,i),s={from:r,to:i};e.toolbar.ol3turf.handler.callback("midpoint",l,s)};return{create:function(o,n){return t.Control.create(o,n,"midpoint","Measure Midpoint",e)}}}({Control:n,utils:t}||{});var O=function(t){const e=function(e){const o=t.utils.getCollection(e,2,1/0),n=o.features.length,r=t.utils.getPoints(o,n,n),i=r[0],l=turf.featureCollection(r.slice(1)),s=turf.nearest(i,l),u={targetPoint:i,points:l};e.toolbar.ol3turf.handler.callback("nearest",s,u)};return{create:function(o,n){return t.Control.create(o,n,"nearest","Find set point nearest to first point",e)}}}({Control:n,utils:t}||{});var z=function(t){const e=function(e){const o=t.utils.getCollection(e,2,2),n=t.utils.getPoints(o,1,1),r=t.utils.getPolygons(o,1,1),i=n[0],l=r[0],s=turf.planepoint(i,l),u={point:i,triangle:l};e.toolbar.ol3turf.handler.callback("planepoint",s,u)};return{create:function(o,n){return t.Control.create(o,n,"planepoint","Triangulate a point in a plane",e)}}}({Control:n,utils:t}||{});var U=function(t){const e="point-grid",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"cell-size"],o.prefix),i=t.utils.getName([e,"form"],o.prefix),l=t.utils.getName([e,"ok"],o.prefix),s=t.utils.getName([e,"units"],o.prefix);const u=[t.utils.getControlNumber(r,"Cell Size","Dimension of cell","1","any","0"),t.utils.getControlSelect(s,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{const n=t.utils.getCollection(o,1,1/0),i=t.utils.getFormNumber(r,"cell size"),l=t.utils.getFormString(s,"units"),u=turf.bbox(n),c=turf.pointGrid(u,i,l);o.showForm();const a={bbox:u,cellSize:i,units:l};o.toolbar.ol3turf.handler.callback(e,c,a)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(u,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Generate Point Grid",o)}}}({Control:n,utils:t}||{});var T=function(t){const e="point-on-line",o=function(o){const n=t.utils.getCollection(o,2,2),r=t.utils.getPoints(n,1,1),i=t.utils.getLines(n,1,1)[0],l=r[0],s=turf.pointOnLine(i,l),u={line:i,point:l};o.toolbar.ol3turf.handler.callback(e,s,u)};return{create:function(n,r){return t.Control.create(n,r,e,"Project point on line",o)}}}({Control:n,utils:t}||{});var j=function(t){const e="point-on-surface",o=function(o){const n=t.utils.getCollection(o,1,1/0),r=turf.pointOnSurface(n),i={fc:n};o.toolbar.ol3turf.handler.callback(e,r,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Measure Point on Surface",o)}}}({Control:n,utils:t}||{});var K=function(t){const e="random",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"count"],o.prefix),i=t.utils.getName([e,"form"],o.prefix),l=t.utils.getName([e,"max-radial-length"],o.prefix),s=t.utils.getName([e,"num-vertices"],o.prefix),u=t.utils.getName([e,"ok"],o.prefix),c=t.utils.getName([e,"type"],o.prefix);const a=[t.utils.getControlSelect(c,"Type",t.utils.getOptionsGeometry()),t.utils.getControlNumber(r,"Count","How many geometries should be generated","1","1","1"),t.utils.getControlNumber(s,"# Vertices","Used only for polygon type","10","1","3"),t.utils.getControlNumber(l,"Max Length","Maximum degrees a polygon can extent outwards from its center (degrees)","10","0.01","0","180"),t.utils.getControlInput(u,function(){try{let n=null;const i=t.utils.getCollection(o,0,1/0);0!==i.features.length&&(n=turf.bbox(i));const u=t.utils.getFormInteger(r,"count"),a=t.utils.getFormInteger(l,"maximum radial length"),f=t.utils.getFormInteger(s,"number of vertices"),g=t.utils.getFormString(c,"type"),p={max_radial_length:a,num_vertices:f};null!==n&&(p.bbox=n);const m=turf.random(g,u,p);o.showForm();const h={type:g,count:u,options:p};o.toolbar.ol3turf.handler.callback(e,m,h)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(a,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Create random data",o)}}}({Control:n,utils:t}||{});var G=function(t){const e="sample",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"count"],o.prefix),i=t.utils.getName([e,"form"],o.prefix),l=t.utils.getName([e,"ok"],o.prefix);const s=[t.utils.getControlNumber(r,"Count","Number of random features to sample","1","1","1"),t.utils.getControlInput(l,function(){try{const n=t.utils.getCollection(o,1,1/0),i=t.utils.getFormInteger(r,"count");if(i>n.features.length)throw new Error("Feature count must be greater than sampling count.");const l=turf.sample(n,i);o.showForm();const s={featurecollection:n,num:i};o.toolbar.ol3turf.handler.callback(e,l,s)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(s,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Randomly sample features",o)}}}({Control:n,utils:t}||{});var L=function(t){const e="simplify",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"form"],o.prefix),i=t.utils.getName([e,"ok"],o.prefix),l=t.utils.getName([e,"quality"],o.prefix),s=t.utils.getName([e,"tolerance"],o.prefix);const u=[t.utils.getControlNumber(s,"Tolerance","Simplification tolerance","1","0.01","0"),t.utils.getControlSelect(l,"Quality",t.utils.getOptionsQuality()),t.utils.getControlInput(i,function(){try{const n=t.utils.getCollection(o,1,1/0),r=t.utils.getFormNumber(s,"tolerance"),i="high"===t.utils.getFormString(l,"quality"),u=turf.simplify(n,r,i);o.showForm();const c={feature:n,tolerance:r,highQuality:i};o.toolbar.ol3turf.handler.callback(e,u,c)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(u,r)};return{create:function(n,r){return t.Control.create(n,r,e,"Simplify shape",o)}}}({Control:n,utils:t}||{});var q=function(t){const e="square-grid",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"cell-size"],o.prefix),i=t.utils.getName([e,"form"],o.prefix),l=t.utils.getName([e,"ok"],o.prefix),s=t.utils.getName([e,"units"],o.prefix);const u=[t.utils.getControlNumber(r,"Cell Size","Dimension of cell","1","any","0"),t.utils.getControlSelect(s,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{const n=t.utils.getCollection(o,1,1/0),i=t.utils.getFormNumber(r,"cell size"),l=t.utils.getFormString(s,"units"),u=turf.bbox(n),c=turf.squareGrid(u,i,l);o.showForm();const a={bbox:u,cellSize:i,units:l};o.toolbar.ol3turf.handler.callback(e,c,a)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(u,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Generate Square Grid",o)}}}({Control:n,utils:t}||{});var D=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1/0),n=turf.bbox(o),r=turf.square(n),i=turf.bboxPolygon(r),l={bbox:n};e.toolbar.ol3turf.handler.callback("square",i,l)};return{create:function(o,n){return t.Control.create(o,n,"square","Create Square",e)}}}({Control:n,utils:t}||{});var H=function(t){const e="tag",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"field-property"],o.prefix),i=t.utils.getName([e,"form"],o.prefix),l=t.utils.getName([e,"ok"],o.prefix),s=t.utils.getName([e,"out-field-property"],o.prefix);const u=[t.utils.getControlText(r,"Field","Property in polygons to add to joined point features"),t.utils.getControlText(s,"Out Field","Property in points in which to store joined property from polygons"),t.utils.getControlInput(l,function(){try{const n=t.utils.getCollection(o,2,1/0),i=t.utils.getPoints(n,1,n.features.length-1),l=n.features.length-i.length,u=t.utils.getPolygons(n,l,l),c=t.utils.getFormString(r,"field"),a=t.utils.getFormString(s,"out field"),f=turf.featureCollection(u),g=turf.featureCollection(i),p=turf.tag(g,f,c,a);o.showForm();const m={points:g,polygons:f,field:c,outField:a};o.toolbar.ol3turf.handler.callback(e,p,m)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(u,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Perform spatial join of points and polygons",o)}}}({Control:n,utils:t}||{});var B=function(t){const e=function(e){const o=t.utils.getCollection(e,1,1),n=t.utils.getPolygons(o,1,1)[0],r=turf.tesselate(n),i={polygon:n};e.toolbar.ol3turf.handler.callback("tesselate",r,i)};return{create:function(o,n){return t.Control.create(o,n,"tesselate","Create tesselation",e)}}}({Control:n,utils:t}||{});var A=function(t){const e="tin",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"form"],o.prefix),i=t.utils.getName([e,"ok"],o.prefix),l=t.utils.getName([e,"z"],o.prefix);const s=[t.utils.getControlText(l,"Z","(Optional) Property from which to pull z values"),t.utils.getControlInput(i,function(){try{let n=t.utils.getCollection(o,3,1/0);const r=n.features.length,i=t.utils.getPoints(n,r,r);n=turf.featureCollection(i);const s=t.utils.getFormString(l,"z"),u=turf.tin(n,s),c={points:n,z:s};o.toolbar.ol3turf.handler.callback(e,u,c)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(s,r)};return{create:function(n,r){return t.Control.create(n,r,e,"Create TIN",o)}}}({Control:n,utils:t}||{}),R=function(t){function e(){return["collect"]}function o(){return["nearest"]}function n(){return["random","sample"]}function r(){return["hex-grid","point-grid","square-grid","triangle-grid","tesselate"]}function i(){return["isolines","planepoint","tin"]}function l(){return["inside","tag","within"]}function s(){return["distance","line-distance","area","bearing","center-of-mass","center","centroid","midpoint","point-on-surface","envelope","square","circle","along","destination"]}function u(){return["combine","explode","flip","kinks","line-slice-along","point-on-line"]}function c(){return["bezier","buffer","concave","convex","difference","intersect","simplify","union"]}return{aggregation:e,all:function(){const t=[];return t.push.apply(t,["distance","line-distance","area","bearing","center-of-mass","center","centroid","midpoint","point-on-surface","envelope","square","circle","along","destination"]),t.push.apply(t,["bezier","buffer","concave","convex","difference","intersect","simplify","union"]),t.push.apply(t,["combine","explode","flip","kinks","line-slice-along","point-on-line"]),t.push.apply(t,["inside","tag","within"]),t.push.apply(t,["nearest"]),t.push.apply(t,["collect"]),t.push.apply(t,["random","sample"]),t.push.apply(t,["isolines","planepoint","tin"]),t.push.apply(t,["hex-grid","point-grid","square-grid","triangle-grid","tesselate"]),t},classification:o,data:n,grids:r,interpolation:i,joins:l,measurement:s,misc:u,transformation:c}}();const Q={controls:{along:r,area:i,bearing:l,bezier:s,buffer:u,center:c,"center-of-mass":a,centroid:f,circle:g,collect:p,combine:m,concave:h,convex:d,destination:C,difference:b,distance:y,envelope:x,explode:N,flip:w,"hex-grid":F,inside:v,intersect:k,isolines:P,kinks:S,"line-distance":I,"line-slice-along":E,midpoint:M,nearest:O,planepoint:z,"point-grid":U,"point-on-line":T,"point-on-surface":j,popup:o,random:K,sample:G,simplify:L,"square-grid":q,square:D,tag:H,tesselate:B,tin:A,toolbars:R,"triangle-grid":function(t){const e="triangle-grid",o=function(o){const n=t.utils.getName([e,"cancel"],o.prefix),r=t.utils.getName([e,"cell-size"],o.prefix),i=t.utils.getName([e,"form"],o.prefix),l=t.utils.getName([e,"ok"],o.prefix),s=t.utils.getName([e,"units"],o.prefix);const u=[t.utils.getControlNumber(r,"Cell Size","Dimension of cell","1","any","0"),t.utils.getControlSelect(s,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{const n=t.utils.getCollection(o,1,1/0),i=t.utils.getFormNumber(r,"cell size"),l=t.utils.getFormString(s,"units"),u=turf.bbox(n),c=turf.triangleGrid(u,i,l);o.showForm();const a={bbox:u,cellSize:i,units:l};o.toolbar.ol3turf.handler.callback(e,c,a)}catch(t){o.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){o.showForm()},"","Cancel")];o.showForm(u,i)};return{create:function(n,r){return t.Control.create(n,r,e,"Generate Triangle Grid",o)}}}({Control:n,utils:t}||{}),union:function(t){const e=function(e){const o=t.utils.getCollection(e,2,2),n=t.utils.getPolygons(o,2,2),r=n[0],i=n[1],l=turf.union(r,i),s={poly1:r,poly2:i};e.toolbar.ol3turf.handler.callback("union",l,s)};return{create:function(o,n){return t.Control.create(o,n,"union","Create Union Polygon",e)}}}({Control:n,utils:t}||{}),utils:t,within:function(t){const e=function(e){const o=t.utils.getCollection(e,2,1/0),n=t.utils.getPoints(o,1,o.features.length-1),r=o.features.length-n.length,i=t.utils.getPolygons(o,r,r),l=turf.featureCollection(n),s=turf.featureCollection(i),u=turf.within(l,s);if(0===u.features.length)throw new Error("No points found within.");const c={points:l,polygons:s};e.toolbar.ol3turf.handler.callback("within",u,c)};return{create:function(o,n){return t.Control.create(o,n,"within","Find points within polygons",e)}}}({Control:n,utils:t}||{})},Handler:function(t){const e=function(t){this.toolbar=t};return e.prototype.callback=function(t,e,o){const n=this.toolbar.ol3turf.controls[t];if("area"===t)n.showMessage("area = "+e+" msq");else if("bearing"===t)n.showMessage("bearing = "+e+" degrees");else if("distance"===t)n.showMessage("distance = "+e+" "+o.units);else if("inside"===t){let t="Point is";!1===e&&(t+=" not"),t+=" inside polygon.",n.showMessage(t)}else"line-distance"===t?n.showMessage("length = "+e+" "+o.units):"planepoint"===t?n.showMessage("z = "+e):n.addFeatures(e)},e}(),toolbars:R},V=function(t){const e=this,o=t||{};o.ol3turf=o.ol3turf||{},void 0===o.ol3turf.controls&&(o.ol3turf.controls=Q.toolbars.all()),void 0===o.ol3turf.handler&&(o.ol3turf.handler=new Q.Handler(e)),void 0===o.ol3turf.style&&(o.ol3turf.style="ol3-turf-toolbar"),void 0===o.ol3turf.prefix&&(o.ol3turf.prefix="ol3-turf"),void 0===o.element&&(o.element=document.createElement("div")),""===o.element.className&&(o.element.className=o.ol3turf.style+" ol-unselectable ol-control");const n={};o.ol3turf.controls.forEach(function(t){if(void 0!==Q.controls[t]){const r=Q.controls[t].create(e,o.ol3turf.prefix);n[t]=r,o.element.appendChild(r.element)}}),this.ol3turf={controls:n,element:o.element,handler:o.ol3turf.handler},ol.control.Control.call(this,o)};return ol.inherits(V,ol.control.Control),{toolbars:R,Toolbar:V}});
