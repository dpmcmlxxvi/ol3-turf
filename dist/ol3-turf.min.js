!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).ol3turf=e()}(this,function(){"use strict";const t={utils:{}};t.utils.extend=function(e,o){void 0!==e&&void 0!==o&&Object.keys(e).forEach(function(n){const r=e[n];if(null!==r&&"object"==typeof r)return void 0===o[n]&&(o[n]={}),void t.utils.extend(r,o[n]);o[n]=r})},t.utils.getClass=function(e,o){return"."+t.utils.getName(e,o)},t.utils.getCollection=function(t,e,o){const n=t.getFeatures();if(n.features.length<e)throw new Error("Number of features less than "+e);if(n.features.length>o)throw new Error("Number of features greater than "+o);return n},t.utils.getControlInput=function(t,e,o,n){return{title:o,type:"input",attributes:{name:t,onclick:e,type:"submit",value:n}}},t.utils.getControlNumber=function(t,e,o,n,r,i,l){return{title:e,type:"input",attributes:{id:t,name:t,min:i,max:l,step:r,title:o,type:"number",value:n}}},t.utils.getControlSelect=function(t,e,o){return{title:e,type:"select",attributes:{id:t,name:t},options:o}},t.utils.getControlText=function(t,e,o){return{title:e,type:"input",attributes:{id:t,name:t,title:o,type:"text"}}},t.utils.getElement=function(e,o,n){return e+"[name='"+t.utils.getName(o,n)+"']"},t.utils.getFeatures=function(t,e,o,n){const r=[];if(e.features.forEach(function(e){t.indexOf(e.geometry.type)>-1&&r.push(e)}),r.length<o)throw new Error("Number of '"+t+"' features less than "+o);if(r.length>n)throw new Error("Number of '"+t+"' features greater than "+n);return r},t.utils.getFormArray=function(e,o){const n=t.utils.getFormString(e,o),r=[];return n.split(",").forEach(function(t){const e=parseFloat(t);if(Number(e)!==e)throw new Error("Invalid "+o);r.push(e)}),r},t.utils.getFormInteger=function(t,e){const o=parseInt(document.getElementById(t).value,10);if(Number(o)!==o)throw new Error("Invalid "+e);return o},t.utils.getFormNumber=function(t,e){const o=parseFloat(document.getElementById(t).value);if(Number(o)!==o)throw new Error("Invalid "+e);return o},t.utils.getFormString=function(t,e){const o=document.getElementById(t).value;if(!o||!o.trim())throw new Error("Invalid "+e);return o},t.utils.getId=function(e,o){return"#"+t.utils.getName(e,o)},t.utils.getLines=function(e,o,n){return t.utils.getFeatures(["LineString"],e,o,n)},t.utils.getName=function(t,e){void 0===e&&(e="ol3-turf");let o=e;return t.forEach(function(t){o+="-"+t}),o},t.utils.getOptionsGeometry=function(){return[{text:"Points",attributes:{selected:"selected",value:"points"}},{text:"Polygons",attributes:{value:"polygons"}}]},t.utils.getOptionsGrids=function(){return[{text:"Hexagons",attributes:{selected:"selected",value:"hexagons"}},{text:"Triangles",attributes:{value:"triangles"}}]},t.utils.getOptionsQuality=function(){return[{text:"High",attributes:{value:"high"}},{text:"Low",attributes:{selected:"selected",value:"low"}}]},t.utils.getOptionsUnits=function(){return[{text:"degrees",attributes:{value:"degrees"}},{text:"kilometers",attributes:{selected:"selected",value:"kilometers"}},{text:"miles",attributes:{value:"miles"}},{text:"radians",attributes:{value:"radians"}}]},t.utils.getPoints=function(e,o,n){return t.utils.getFeatures(["Point"],e,o,n)},t.utils.getPolygons=function(e,o,n){return t.utils.getFeatures(["Polygon"],e,o,n)},t.utils.getPolygonsAll=function(e,o,n){return t.utils.getFeatures(["Polygon","MultiPolygon"],e,o,n)};var e=t.utils;const o={utils:e};const n={utils:e};function r(t,e,o,i){const l="ol3-turf-popup",s=document.getElementById(l);let u=null;if(null!==s&&null!==(u=s.parentNode)&&u.removeChild(s),null==t)return;let c=document.body;null!=o&&(c=o);const a=document.createElement("div");a.className=l,a.id=l,n.utils.extend(i,a);const f=document.createElement("div");f.className="ol3-turf-popup-message",f.innerHTML=t;const g=document.createElement("button");g.className="ol3-turf-popup-button",g.innerHTML="OK",g.onclick=function(){null!=e&&e(),r()},g.type="button";const m=document.createElement("div");return m.className="ol3-turf-popup-button-container",m.appendChild(g),a.appendChild(f),a.appendChild(m),c.appendChild(a),a}const i={form:function(t,e,n,r){let i=null;if(null===(i="string"==typeof t?document.getElementById(t):t))throw new Error("ol3turf.form: Parent element not found.");if(void 0===e)throw new Error("ol3turf.form: Form ID not provided.");if(void 0===n)throw new Error("ol3turf.form: Form controls not provided.");const l=document.createElement("form");l.id=e,l.className="ol3-turf-form ol-unselectable ol-control",l.setAttribute("onsubmit","return false;"),o.utils.extend(r,l);const s=document.createElement("table");return s.className="ol3-turf-form-table",n.forEach(function(t){const e=document.createElement("tr");e.className="ol3-turf-form-row";const n=document.createElement("th");n.innerHTML=t.title,n.className="ol3-turf-form-header",e.appendChild(n);const r=document.createElement("td");r.className="ol3-turf-form-data";const i=document.createElement(t.type);i.className="ol3-turf-form-input",o.utils.extend(t.attributes,i),"select"===t.type&&(i.className="ol3-turf-form-select",void 0!==t.options&&t.options.forEach(function(t){const e=document.createElement("option");e.innerHTML=t.text,e.className="ol3-turf-form-option",o.utils.extend(t.attributes,e),i.appendChild(e)})),r.appendChild(i),e.appendChild(r),s.appendChild(e)}),l.appendChild(s),i.appendChild(l),l},popup:r,utils:e};function l(t){const e=t.getBoundingClientRect();let o=0,n=0;do{n+=t.offsetTop||0,o+=t.offsetLeft||0,t=t.offsetParent}while(t);return{bottom:n+e.height,height:e.height,left:o,right:o+e.width,top:n,width:e.width}}const s=function(t){const e=t||{},o=this;this.button=document.createElement("button"),this.button.addEventListener("click",this.run.bind(this),!1),this.button.addEventListener("touchstart",this.run.bind(this),!1),Object.keys(e).forEach(function(t){o.button[t]=e[t]}),this.element=document.createElement("div"),this.element.className="ol3-turf-control",this.element.appendChild(this.button),this.toolbar=null,this.form=null,this.prefix="ol3-turf"};s.prototype.action=function(){throw new Error("Control action not implemented!")},s.prototype.addFeatures=function(t){const e=this.getProjectionMap(),o=this.getProjectionTurf(),n=new ol.format.GeoJSON,r=new ol.layer.Vector({source:new ol.source.Vector({features:n.readFeatures(t,{dataProjection:o,featureProjection:e})})});this.getMap().addLayer(r)},s.prototype.getFeatures=function(){const t=this.getProjectionMap(),e=this.getProjectionTurf(),o=new ol.format.GeoJSON,n=[];return this.getSelectors().forEach(function(r){r.getFeatures().forEach(function(r){n.push(o.writeFeatureObject(r,{dataProjection:e,featureProjection:t}))})}),turf.featureCollection(n)},s.prototype.getFormPosition=function(t){const e=l(this.button),o=l(t),n=l(this.getMap().getTargetElement()),r=l(this.toolbar.ol3turf.element);return o.top=e.top,o.left=e.left,function(t,e,o,n){o.width>o.height?t.top=function(t,e,o,n){let r=0,i=o.bottom;return i+=r=n.top-e.top>.5*e.height?-o.height-t.height+-n.height/2:n.height/2}(t,e,o,n):t.left=function(t,e,o,n){let r=0,i=o.left+o.width;return i+=r=n.left-e.left>.5*e.width?-o.width-t.width+-n.width/2:n.width/2}(t,e,o,n)}(o,n,r,e),function(t,e,o){const n=e.right-(t.left+t.width),r=t.left+n;n<0&&r>0&&(t.left+=n-o.width/2)}(o,n,e),function(t,e,o){const n=e.bottom-(t.top+t.height),r=t.top+n;n<0&&r>0&&(t.top+=n-o.height/2)}(o,n,e),o.top-=n.top,o.left-=n.left,{top:o.top,left:o.left}},s.prototype.getMap=function(){if(null===this.toolbar)return null;return this.toolbar.getMap()},s.prototype.getProjectionMap=function(){let t="EPSG:3857";const e=this.getMap().getView().getProjection();return void 0!==e&&(t=e.getCode()),t},s.prototype.getProjectionTurf=function(){return"EPSG:4326"},s.prototype.getSelectors=function(){const t=[],e=this.getMap();return null===e?t:(e.getInteractions().forEach(function(e){e instanceof ol.interaction.Select&&t.push(e)}),t)},s.prototype.run=function(){try{this.action()}catch(t){this.showMessage(t.message)}},s.prototype.showForm=function(t,e){const o=this.toolbar.element.parentNode;if(null!==this.form&&(o.removeChild(this.form),this.form=null),void 0===t)return;void 0===e&&(e="ol3-turf-form"),this.form=i.form(o,e,t,{style:{visibility:"hidden"}});const n=this.getFormPosition(this.form);this.form.style.left=n.left+"px",this.form.style.top=n.top+"px",this.form.style.visibility="visible"},s.prototype.showMessage=function(t){const e=this.toolbar.ol3turf.element.parentNode,o=i.popup(t,null,e,{style:{visibility:"hidden"}}),n=this.getFormPosition(o);o.style.left=n.left+"px",o.style.top=n.top+"px",o.style.visibility="visible"},s.create=function(t,e,o,n,r){const l=i.utils.getName([o]),u=i.utils.getName(["control","button"]),c=i.utils.getName([o],e),a=new s({className:l+" "+u,id:c,title:n});return a.prefix=e,a.toolbar=t,a.action=function(){return r(a)},a};const u={Control:s,utils:e},c="along",a=function(t){const e=u.utils.getName([c,"cancel"],t.prefix),o=u.utils.getName([c,"distance"],t.prefix),n=u.utils.getName([c,"form"],t.prefix),r=u.utils.getName([c,"ok"],t.prefix),i=u.utils.getName([c,"units"],t.prefix),l=[u.utils.getControlNumber(o,"Distance","Distance along the line","0","any","0"),u.utils.getControlSelect(i,"Units",u.utils.getOptionsUnits()),u.utils.getControlInput(r,function(){try{const e=u.utils.getCollection(t,1,1),n=u.utils.getLines(e,1,1)[0],r=u.utils.getFormNumber(o,"distance"),l=u.utils.getFormString(i,"units"),s=turf.along(n,r,l);t.showForm();const a={line:n,distance:r,units:l};t.toolbar.ol3turf.handler.callback(c,s,a)}catch(e){t.showMessage(e)}},"","OK"),u.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(l,n)};const f={Control:s,utils:e},g=function(t){const e=f.utils.getCollection(t,1,1/0),o=turf.area(e),n={input:e};t.toolbar.ol3turf.handler.callback("area",o,n)};const m={Control:s,utils:e},p=function(t){const e=m.utils.getCollection(t,2,2),o=m.utils.getPoints(e,2,2),n=o[0],r=o[1],i=turf.bearing(n,r),l={start:n,end:r};t.toolbar.ol3turf.handler.callback("bearing",i,l)};const h={Control:s,utils:e},d=function(t){const e=h.utils.getName(["bezier","cancel"],t.prefix),o=h.utils.getName(["bezier","form"],t.prefix),n=h.utils.getName(["bezier","ok"],t.prefix),r=h.utils.getName(["bezier","resolution"],t.prefix),i=h.utils.getName(["bezier","sharpness"],t.prefix),l=[h.utils.getControlNumber(r,"Resolution","Time between points (milliseconds)","10000","any","0"),h.utils.getControlNumber(i,"Sharpness","Measure of how curvy the path should be between splines","0.85","0.01","0","1"),h.utils.getControlInput(n,function(){try{const e=h.utils.getCollection(t,1,1),o=h.utils.getLines(e,1,1)[0],n=h.utils.getFormNumber(r,"resolution"),l=h.utils.getFormNumber(i,"sharpness"),s=turf.bezier(o,n,l);t.showForm();const u={line:o,resolution:n,sharpness:l};t.toolbar.ol3turf.handler.callback("bezier",s,u)}catch(e){t.showMessage(e)}},"","OK"),h.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(l,o)};const C={Control:s,utils:e},b=function(t){const e=C.utils.getName(["buffer","cancel"],t.prefix),o=C.utils.getName(["buffer","distance"],t.prefix),n=C.utils.getName(["buffer","form"],t.prefix),r=C.utils.getName(["buffer","ok"],t.prefix),i=C.utils.getName(["buffer","units"],t.prefix),l=[C.utils.getControlNumber(o,"Distance","Distance to draw the buffer","0","any","0"),C.utils.getControlSelect(i,"Units",C.utils.getOptionsUnits()),C.utils.getControlInput(r,function(){try{const e=C.utils.getCollection(t,1,1/0),n=C.utils.getFormNumber(o,"distance"),r=C.utils.getFormString(i,"units"),l=turf.buffer(e,n,r);t.showForm();const s={feature:e,distance:n,unit:r};t.toolbar.ol3turf.handler.callback("buffer",l,s)}catch(e){t.showMessage(e)}},"","OK"),C.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(l,n)};const x={Control:s,utils:e},N=function(t){const e=x.utils.getCollection(t,1,1/0),o=turf.center(e),n={features:e};t.toolbar.ol3turf.handler.callback("center",o,n)};const y={Control:s,utils:e},w=function(t){const e=y.utils.getCollection(t,1,1/0),o=turf.centerOfMass(e),n={features:e};t.toolbar.ol3turf.handler.callback("center-of-mass",o,n)};const F={Control:s,utils:e},k=function(t){const e=F.utils.getCollection(t,1,1/0),o=turf.centroid(e),n={features:e};t.toolbar.ol3turf.handler.callback("centroid",o,n)};const v={Control:s,utils:e},P=function(t){const e=v.utils.getName(["circle","cancel"],t.prefix),o=v.utils.getName(["circle","form"],t.prefix),n=v.utils.getName(["circle","ok"],t.prefix),r=v.utils.getName(["circle","radius"],t.prefix),i=v.utils.getName(["circle","steps"],t.prefix),l=v.utils.getName(["circle","units"],t.prefix),s=[v.utils.getControlNumber(r,"Radius","Radius of the circle","0","any","0"),v.utils.getControlNumber(i,"Steps","Number of steps around circle","3","1","3"),v.utils.getControlSelect(l,"Units",v.utils.getOptionsUnits()),v.utils.getControlInput(n,function(){try{const e=v.utils.getCollection(t,1,1),o=v.utils.getPoints(e,1,1)[0],n=v.utils.getFormNumber(r,"radius"),s=v.utils.getFormNumber(i,"steps"),u=v.utils.getFormString(l,"units"),c=turf.circle(o,n,s,u);t.showForm();const a={center:o,radius:n,steps:s,units:u};t.toolbar.ol3turf.handler.callback("circle",c,a)}catch(e){t.showMessage(e)}},"","OK"),v.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(s,o)};const S={Control:s,utils:e},I="collect",E=function(t){const e=S.utils.getName([I,"cancel"],t.prefix),o=S.utils.getName([I,"form"],t.prefix),n=S.utils.getName([I,"in","property"],t.prefix),r=S.utils.getName([I,"ok"],t.prefix),i=S.utils.getName([I,"out","property"],t.prefix),l=[S.utils.getControlText(n,"In Property","Property to be nested from"),S.utils.getControlText(i,"Out Property","Property to be nested into"),S.utils.getControlInput(r,function(){try{const e=S.utils.getCollection(t,2,1/0),o=S.utils.getPoints(e,1,e.features.length-1),r=e.features.length-o.length,l=S.utils.getPolygons(e,r,r),s=S.utils.getFormString(n,"In-Property"),u=S.utils.getFormString(i,"Out-Property"),c=turf.featureCollection(l),a=turf.featureCollection(o),f=turf.collect(c,a,s,u);t.showForm();const g={polygons:c,points:a,inProperty:s,outProperty:u};t.toolbar.ol3turf.handler.callback(I,f,g)}catch(e){t.showMessage(e)}},"","OK"),S.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(l,o)};const M={Control:s,utils:e},O=function(t){const e=M.utils.getCollection(t,1,1/0),o=turf.combine(e),n={fc:e};t.toolbar.ol3turf.handler.callback("combine",o,n)};const z={Control:s,utils:e},U="concave",T=function(t){const e=z.utils.getName([U,"cancel"],t.prefix),o=z.utils.getName([U,"form"],t.prefix),n=z.utils.getName([U,"max","edge"],t.prefix),r=z.utils.getName([U,"ok"],t.prefix),i=z.utils.getName([U,"units"],t.prefix),l=[z.utils.getControlNumber(n,"Max Edge Size","Maximum size of an edge necessary for part of the hull to become concave","0","any","0"),z.utils.getControlSelect(i,"Units",z.utils.getOptionsUnits()),z.utils.getControlInput(r,function(){try{const e=z.utils.getCollection(t,3,1/0),o=e.features.length,r=z.utils.getPoints(e,o,o),l=z.utils.getFormNumber(n,"Max Edge"),s=z.utils.getFormString(i,"units"),u=turf.featureCollection(r),c=turf.concave(u,l,s);t.showForm();const a={points:u,maxEdge:l,units:s};t.toolbar.ol3turf.handler.callback(U,c,a)}catch(e){t.showMessage(e)}},"","OK"),z.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(l,o)};const j={Control:s,utils:e},K=function(t){const e=j.utils.getCollection(t,1,1/0),o=turf.convex(e),n={featurecollection:e};t.toolbar.ol3turf.handler.callback("convex",o,n)};const G={Control:s,utils:e},L="destination",q=function(t){const e=G.utils.getName([L,"bearing"],t.prefix),o=G.utils.getName([L,"cancel"],t.prefix),n=G.utils.getName([L,"distance"],t.prefix),r=G.utils.getName([L,"form"],t.prefix),i=G.utils.getName([L,"ok"],t.prefix),l=G.utils.getName([L,"units"],t.prefix),s=[G.utils.getControlNumber(e,"Bearing","Bearing angle (degrees)","0","any","-180","180"),G.utils.getControlNumber(n,"Distance","Distance from the starting point","0","any","0"),G.utils.getControlSelect(l,"Units",G.utils.getOptionsUnits()),G.utils.getControlInput(i,function(){try{const o=G.utils.getCollection(t,1,1),r=G.utils.getPoints(o,1,1)[0],i=G.utils.getFormNumber(n,"distance"),s=G.utils.getFormNumber(e,"bearing"),u=G.utils.getFormString(l,"units"),c=turf.destination(r,i,s,u);t.showForm();const a={from:r,distance:i,bearing:s,units:u};t.toolbar.ol3turf.handler.callback(L,c,a)}catch(e){t.showMessage(e)}},"","OK"),G.utils.getControlInput(o,function(){t.showForm()},"","Cancel")];t.showForm(s,r)};const D={Control:s,utils:e},H=function(t){const e=D.utils.getCollection(t,2,2),o=D.utils.getPolygons(e,2,2),n=o[0],r=o[1],i=turf.difference(n,r),l={poly1:n,poly2:r};t.toolbar.ol3turf.handler.callback("difference",i,l)};const B={Control:s,utils:e},A="distance",R=function(t){const e=B.utils.getName([A,"cancel"],t.prefix),o=B.utils.getName([A,"form"],t.prefix),n=B.utils.getName([A,"ok"],t.prefix),r=B.utils.getName([A,"units"],t.prefix),i=[B.utils.getControlSelect(r,"Units",B.utils.getOptionsUnits()),B.utils.getControlInput(n,function(){try{const e=B.utils.getCollection(t,2,2),o=B.utils.getPoints(e,2,2),n=o[0],i=o[1],l=B.utils.getFormString(r,"units"),s=turf.distance(n,i,l);t.showForm();const u={from:n,to:i,units:l};t.toolbar.ol3turf.handler.callback(A,s,u)}catch(e){t.showMessage(e)}},"","OK"),B.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(i,o)};const Q={Control:s,utils:e},V=function(t){const e=Q.utils.getCollection(t,1,1/0),o=turf.envelope(e),n={fc:e};t.toolbar.ol3turf.handler.callback("envelope",o,n)};const _={Control:s,utils:e},J=function(t){const e=_.utils.getCollection(t,1,1/0),o=turf.explode(e),n={geojson:e};t.toolbar.ol3turf.handler.callback("explode",o,n)};const Z={Control:s,utils:e},W=function(t){const e=Z.utils.getCollection(t,1,1/0),o=turf.flip(e),n={input:e};t.toolbar.ol3turf.handler.callback("flip",o,n)};const X={Control:s,utils:e},Y="hex-grid",$=function(t){const e=X.utils.getName([Y,"cancel"],t.prefix),o=X.utils.getName([Y,"cell-size"],t.prefix),n=X.utils.getName([Y,"form"],t.prefix),r=X.utils.getName([Y,"type"],t.prefix),i=X.utils.getName([Y,"ok"],t.prefix),l=X.utils.getName([Y,"units"],t.prefix),s=[X.utils.getControlNumber(o,"Cell Size","Dimension of cell","1","any","0"),X.utils.getControlSelect(l,"Units",X.utils.getOptionsUnits()),X.utils.getControlSelect(r,"Type",X.utils.getOptionsGrids()),X.utils.getControlInput(i,function(){try{const e=X.utils.getCollection(t,1,1/0),n=X.utils.getFormNumber(o,"cell size"),i=X.utils.getFormString(r,"grid type"),s=X.utils.getFormString(l,"units"),u="triangles"===i,c=turf.bbox(e),a=turf.hexGrid(c,n,s,u);t.showForm();const f={bbox:c,cellSize:n,units:s,triangles:u};t.toolbar.ol3turf.handler.callback(Y,a,f)}catch(e){t.showMessage(e)}},"","OK"),X.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(s,n)};const tt={Control:s,utils:e},et=function(t){const e=tt.utils.getCollection(t,2,2),o=tt.utils.getPoints(e,1,1),n=tt.utils.getPolygonsAll(e,1,1),r=o[0],i=n[0],l=turf.inside(r,i),s={point:r,polygon:i};t.toolbar.ol3turf.handler.callback("inside",l,s)};const ot={Control:s,utils:e},nt=function(t){const e=ot.utils.getCollection(t,2,2),o=ot.utils.getPolygonsAll(e,2,2),n=o[0],r=o[1],i=turf.intersect(n,r),l={poly1:n,poly2:r};t.toolbar.ol3turf.handler.callback("intersect",i,l)};const rt={Control:s,utils:e},it="isolines",lt=function(t){const e=rt.utils.getName([it,"breaks"],t.prefix),o=rt.utils.getName([it,"cancel"],t.prefix),n=rt.utils.getName([it,"form"],t.prefix),r=rt.utils.getName([it,"ok"],t.prefix),i=rt.utils.getName([it,"resolution"],t.prefix),l=rt.utils.getName([it,"z"],t.prefix),s=[rt.utils.getControlNumber(i,"Resolution","Resolution of the underlying grid","1","any","0.01"),rt.utils.getControlText(l,"Z Property","Property name in points from which z-values will be pulled"),rt.utils.getControlText(e,"Breaks","Comma separated list of where to draw contours"),rt.utils.getControlInput(r,function(){try{const o=rt.utils.getCollection(t,1,1/0),n=rt.utils.getFormArray(e,"breaks"),r=rt.utils.getFormNumber(i,"resolution"),s=rt.utils.getFormString(l,"z"),u=turf.isolines(o,s,r,n);t.showForm();const c={points:o,z:s,resolution:r,breaks:n};t.toolbar.ol3turf.handler.callback(it,u,c)}catch(e){t.showMessage(e)}},"","OK"),rt.utils.getControlInput(o,function(){t.showForm()},"","Cancel")];t.showForm(s,n)};const st={Control:s,utils:e},ut=function(t){const e=st.utils.getCollection(t,1,1),o=st.utils.getPolygons(e,1,1)[0],n=turf.kinks(o);if(0===n.features.length)throw new Error("No kinks found.");const r={polygon:o};t.toolbar.ol3turf.handler.callback("kinks",n,r)};const ct={Control:s,utils:e},at="line-distance",ft=function(t){const e=ct.utils.getName([at,"cancel"],t.prefix),o=ct.utils.getName([at,"form"],t.prefix),n=ct.utils.getName([at,"ok"],t.prefix),r=ct.utils.getName([at,"units"],t.prefix),i=[ct.utils.getControlSelect(r,"Units",ct.utils.getOptionsUnits()),ct.utils.getControlInput(n,function(){try{const e=ct.utils.getCollection(t,1,1/0),o=ct.utils.getFormString(r,"units"),n=turf.lineDistance(e,o);t.showForm();const i={line:e,units:o};t.toolbar.ol3turf.handler.callback(at,n,i)}catch(e){t.showMessage(e)}},"","OK"),ct.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(i,o)};const gt={Control:s,utils:e},mt="line-slice-along",pt=function(t){const e=gt.utils.getName([mt,"cancel"],t.prefix),o=gt.utils.getName([mt,"form"],t.prefix),n=gt.utils.getName([mt,"ok"],t.prefix),r=gt.utils.getName([mt,"start"],t.prefix),i=gt.utils.getName([mt,"stop"],t.prefix),l=gt.utils.getName([mt,"units"],t.prefix),s=[gt.utils.getControlNumber(r,"Start","Starting distance along the line","0","any","0"),gt.utils.getControlNumber(i,"Stop","Stoping distance along the line","0","any","0"),gt.utils.getControlSelect(l,"Units",gt.utils.getOptionsUnits()),gt.utils.getControlInput(n,function(){try{const e=gt.utils.getCollection(t,1,1),o=gt.utils.getLines(e,1,1)[0],n=gt.utils.getFormNumber(r,"start"),s=gt.utils.getFormNumber(i,"stop");if(!0!=n<s)throw new Error("Start must be less than stop");const u=gt.utils.getFormString(l,"units"),c=turf.lineDistance(o,u);if(n>c)throw new Error("Start must be less than line length");if(s>c)throw new Error("Stop must be less than line length");const a=turf.lineSliceAlong(o,n,s,u);t.showForm();const f={line:o,start:n,stop:s,units:u};t.toolbar.ol3turf.handler.callback(mt,a,f)}catch(e){t.showMessage(e)}},"","OK"),gt.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(s,o)};const ht={Control:s,utils:e},dt=function(t){const e=ht.utils.getCollection(t,2,2),o=ht.utils.getPoints(e,2,2),n=o[0],r=o[1],i=turf.midpoint(n,r),l={from:n,to:r};t.toolbar.ol3turf.handler.callback("midpoint",i,l)};const Ct={Control:s,utils:e},bt=function(t){const e=Ct.utils.getCollection(t,2,1/0),o=e.features.length,n=Ct.utils.getPoints(e,o,o),r=n[0],i=turf.featureCollection(n.slice(1)),l=turf.nearest(r,i),s={targetPoint:r,points:i};t.toolbar.ol3turf.handler.callback("nearest",l,s)};const xt={Control:s,utils:e},Nt=function(t){const e=xt.utils.getCollection(t,2,2),o=xt.utils.getPoints(e,1,1),n=xt.utils.getPolygons(e,1,1),r=o[0],i=n[0],l=turf.planepoint(r,i),s={point:r,triangle:i};t.toolbar.ol3turf.handler.callback("planepoint",l,s)};const yt={Control:s,utils:e},wt="point-grid",Ft=function(t){const e=yt.utils.getName([wt,"cancel"],t.prefix),o=yt.utils.getName([wt,"cell-size"],t.prefix),n=yt.utils.getName([wt,"form"],t.prefix),r=yt.utils.getName([wt,"ok"],t.prefix),i=yt.utils.getName([wt,"units"],t.prefix),l=[yt.utils.getControlNumber(o,"Cell Size","Dimension of cell","1","any","0"),yt.utils.getControlSelect(i,"Units",yt.utils.getOptionsUnits()),yt.utils.getControlInput(r,function(){try{const e=yt.utils.getCollection(t,1,1/0),n=yt.utils.getFormNumber(o,"cell size"),r=yt.utils.getFormString(i,"units"),l=turf.bbox(e),s=turf.pointGrid(l,n,r);t.showForm();const u={bbox:l,cellSize:n,units:r};t.toolbar.ol3turf.handler.callback(wt,s,u)}catch(e){t.showMessage(e)}},"","OK"),yt.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(l,n)};const kt={Control:s,utils:e},vt=function(t){const e=kt.utils.getCollection(t,2,2),o=kt.utils.getPoints(e,1,1),n=kt.utils.getLines(e,1,1)[0],r=o[0],i=turf.pointOnLine(n,r),l={line:n,point:r};t.toolbar.ol3turf.handler.callback("point-on-line",i,l)};const Pt={Control:s,utils:e},St=function(t){const e=Pt.utils.getCollection(t,1,1/0),o=turf.pointOnSurface(e),n={fc:e};t.toolbar.ol3turf.handler.callback("point-on-surface",o,n)};const It={Control:s,utils:e},Et="random",Mt=function(t){const e=It.utils.getName([Et,"cancel"],t.prefix),o=It.utils.getName([Et,"count"],t.prefix),n=It.utils.getName([Et,"form"],t.prefix),r=It.utils.getName([Et,"max-radial-length"],t.prefix),i=It.utils.getName([Et,"num-vertices"],t.prefix),l=It.utils.getName([Et,"ok"],t.prefix),s=It.utils.getName([Et,"type"],t.prefix),u=[It.utils.getControlSelect(s,"Type",It.utils.getOptionsGeometry()),It.utils.getControlNumber(o,"Count","How many geometries should be generated","1","1","1"),It.utils.getControlNumber(i,"# Vertices","Used only for polygon type","10","1","3"),It.utils.getControlNumber(r,"Max Length","Maximum degrees a polygon can extent outwards from its center (degrees)","10","0.01","0","180"),It.utils.getControlInput(l,function(){try{let e=null;const n=It.utils.getCollection(t,0,1/0);0!==n.features.length&&(e=turf.bbox(n));const l=It.utils.getFormInteger(o,"count"),u=It.utils.getFormInteger(r,"maximum radial length"),c=It.utils.getFormInteger(i,"number of vertices"),a=It.utils.getFormString(s,"type"),f={max_radial_length:u,num_vertices:c};null!==e&&(f.bbox=e);const g=turf.random(a,l,f);t.showForm();const m={type:a,count:l,options:f};t.toolbar.ol3turf.handler.callback(Et,g,m)}catch(e){t.showMessage(e)}},"","OK"),It.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(u,n)};const Ot={Control:s,utils:e},zt=function(t){const e=Ot.utils.getName(["sample","cancel"],t.prefix),o=Ot.utils.getName(["sample","count"],t.prefix),n=Ot.utils.getName(["sample","form"],t.prefix),r=Ot.utils.getName(["sample","ok"],t.prefix),i=[Ot.utils.getControlNumber(o,"Count","Number of random features to sample","1","1","1"),Ot.utils.getControlInput(r,function(){try{const e=Ot.utils.getCollection(t,1,1/0),n=Ot.utils.getFormInteger(o,"count");if(n>e.features.length)throw new Error("Feature count must be greater than sampling count.");const r=turf.sample(e,n);t.showForm();const i={featurecollection:e,num:n};t.toolbar.ol3turf.handler.callback("sample",r,i)}catch(e){t.showMessage(e)}},"","OK"),Ot.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(i,n)};const Ut={Control:s,utils:e},Tt="simplify",jt=function(t){const e=Ut.utils.getName([Tt,"cancel"],t.prefix),o=Ut.utils.getName([Tt,"form"],t.prefix),n=Ut.utils.getName([Tt,"ok"],t.prefix),r=Ut.utils.getName([Tt,"quality"],t.prefix),i=Ut.utils.getName([Tt,"tolerance"],t.prefix),l=[Ut.utils.getControlNumber(i,"Tolerance","Simplification tolerance","1","0.01","0"),Ut.utils.getControlSelect(r,"Quality",Ut.utils.getOptionsQuality()),Ut.utils.getControlInput(n,function(){try{const e=Ut.utils.getCollection(t,1,1/0),o=Ut.utils.getFormNumber(i,"tolerance"),n="high"===Ut.utils.getFormString(r,"quality"),l=turf.simplify(e,o,n);t.showForm();const s={feature:e,tolerance:o,highQuality:n};t.toolbar.ol3turf.handler.callback(Tt,l,s)}catch(e){t.showMessage(e)}},"","OK"),Ut.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(l,o)};const Kt={Control:s,utils:e},Gt="square-grid",Lt=function(t){const e=Kt.utils.getName([Gt,"cancel"],t.prefix),o=Kt.utils.getName([Gt,"cell-size"],t.prefix),n=Kt.utils.getName([Gt,"form"],t.prefix),r=Kt.utils.getName([Gt,"ok"],t.prefix),i=Kt.utils.getName([Gt,"units"],t.prefix),l=[Kt.utils.getControlNumber(o,"Cell Size","Dimension of cell","1","any","0"),Kt.utils.getControlSelect(i,"Units",Kt.utils.getOptionsUnits()),Kt.utils.getControlInput(r,function(){try{const e=Kt.utils.getCollection(t,1,1/0),n=Kt.utils.getFormNumber(o,"cell size"),r=Kt.utils.getFormString(i,"units"),l=turf.bbox(e),s=turf.squareGrid(l,n,r);t.showForm();const u={bbox:l,cellSize:n,units:r};t.toolbar.ol3turf.handler.callback(Gt,s,u)}catch(e){t.showMessage(e)}},"","OK"),Kt.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(l,n)};const qt={Control:s,utils:e},Dt=function(t){const e=qt.utils.getCollection(t,1,1/0),o=turf.bbox(e),n=turf.square(o),r=turf.bboxPolygon(n),i={bbox:o};t.toolbar.ol3turf.handler.callback("square",r,i)};const Ht={Control:s,utils:e},Bt=function(t){const e=Ht.utils.getName(["tag","cancel"],t.prefix),o=Ht.utils.getName(["tag","field-property"],t.prefix),n=Ht.utils.getName(["tag","form"],t.prefix),r=Ht.utils.getName(["tag","ok"],t.prefix),i=Ht.utils.getName(["tag","out-field-property"],t.prefix),l=[Ht.utils.getControlText(o,"Field","Property in polygons to add to joined point features"),Ht.utils.getControlText(i,"Out Field","Property in points in which to store joined property from polygons"),Ht.utils.getControlInput(r,function(){try{const e=Ht.utils.getCollection(t,2,1/0),n=Ht.utils.getPoints(e,1,e.features.length-1),r=e.features.length-n.length,l=Ht.utils.getPolygons(e,r,r),s=Ht.utils.getFormString(o,"field"),u=Ht.utils.getFormString(i,"out field"),c=turf.featureCollection(l),a=turf.featureCollection(n),f=turf.tag(a,c,s,u);t.showForm();const g={points:a,polygons:c,field:s,outField:u};t.toolbar.ol3turf.handler.callback("tag",f,g)}catch(e){t.showMessage(e)}},"","OK"),Ht.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(l,n)};const At={Control:s,utils:e},Rt=function(t){const e=At.utils.getCollection(t,1,1),o=At.utils.getPolygons(e,1,1)[0],n=turf.tesselate(o),r={polygon:o};t.toolbar.ol3turf.handler.callback("tesselate",n,r)};const Qt={Control:s,utils:e},Vt=function(t){const e=Qt.utils.getName(["tin","cancel"],t.prefix),o=Qt.utils.getName(["tin","form"],t.prefix),n=Qt.utils.getName(["tin","ok"],t.prefix),r=Qt.utils.getName(["tin","z"],t.prefix),i=[Qt.utils.getControlText(r,"Z","(Optional) Property from which to pull z values"),Qt.utils.getControlInput(n,function(){try{let e=Qt.utils.getCollection(t,3,1/0);const o=e.features.length,n=Qt.utils.getPoints(e,o,o);e=turf.featureCollection(n);const i=Qt.utils.getFormString(r,"z"),l=turf.tin(e,i),s={points:e,z:i};t.toolbar.ol3turf.handler.callback("tin",l,s)}catch(e){t.showMessage(e)}},"","OK"),Qt.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(i,o)};function _t(){return["collect"]}function Jt(){return["nearest"]}function Zt(){return["random","sample"]}function Wt(){return["hex-grid","point-grid","square-grid","triangle-grid","tesselate"]}function Xt(){return["isolines","planepoint","tin"]}function Yt(){return["inside","tag","within"]}function $t(){return["distance","line-distance","area","bearing","center-of-mass","center","centroid","midpoint","point-on-surface","envelope","square","circle","along","destination"]}function te(){return["combine","explode","flip","kinks","line-slice-along","point-on-line"]}function ee(){return["bezier","buffer","concave","convex","difference","intersect","simplify","union"]}var oe={aggregation:_t,all:function(){const t=[];return t.push("distance","line-distance","area","bearing","center-of-mass","center","centroid","midpoint","point-on-surface","envelope","square","circle","along","destination"),t.push("bezier","buffer","concave","convex","difference","intersect","simplify","union"),t.push("combine","explode","flip","kinks","line-slice-along","point-on-line"),t.push("inside","tag","within"),t.push("nearest"),t.push("collect"),t.push("random","sample"),t.push("isolines","planepoint","tin"),t.push("hex-grid","point-grid","square-grid","triangle-grid","tesselate"),t},classification:Jt,data:Zt,grids:Wt,interpolation:Xt,joins:Yt,measurement:$t,misc:te,transformation:ee};const ne={Control:s,utils:e},re="triangle-grid",ie=function(t){const e=ne.utils.getName([re,"cancel"],t.prefix),o=ne.utils.getName([re,"cell-size"],t.prefix),n=ne.utils.getName([re,"form"],t.prefix),r=ne.utils.getName([re,"ok"],t.prefix),i=ne.utils.getName([re,"units"],t.prefix),l=[ne.utils.getControlNumber(o,"Cell Size","Dimension of cell","1","any","0"),ne.utils.getControlSelect(i,"Units",ne.utils.getOptionsUnits()),ne.utils.getControlInput(r,function(){try{const e=ne.utils.getCollection(t,1,1/0),n=ne.utils.getFormNumber(o,"cell size"),r=ne.utils.getFormString(i,"units"),l=turf.bbox(e),s=turf.triangleGrid(l,n,r);t.showForm();const u={bbox:l,cellSize:n,units:r};t.toolbar.ol3turf.handler.callback(re,s,u)}catch(e){t.showMessage(e)}},"","OK"),ne.utils.getControlInput(e,function(){t.showForm()},"","Cancel")];t.showForm(l,n)};const le={Control:s,utils:e},se=function(t){const e=le.utils.getCollection(t,2,2),o=le.utils.getPolygons(e,2,2),n=o[0],r=o[1],i=turf.union(n,r),l={poly1:n,poly2:r};t.toolbar.ol3turf.handler.callback("union",i,l)};const ue={Control:s,utils:e},ce=function(t){const e=ue.utils.getCollection(t,2,1/0),o=ue.utils.getPoints(e,1,e.features.length-1),n=e.features.length-o.length,r=ue.utils.getPolygons(e,n,n),i=turf.featureCollection(o),l=turf.featureCollection(r),s=turf.within(i,l);if(0===s.features.length)throw new Error("No points found within.");const u={points:i,polygons:l};t.toolbar.ol3turf.handler.callback("within",s,u)};var ae={along:{create:function(t,e){return u.Control.create(t,e,c,"Find point along line at given distance",a)}},area:{create:function(t,e){return f.Control.create(t,e,"area","Measure Area",g)}},bearing:{create:function(t,e){return m.Control.create(t,e,"bearing","Measure Bearing",p)}},bezier:{create:function(t,e){return h.Control.create(t,e,"bezier","Create bezier curve of line",d)}},buffer:{create:function(t,e){return C.Control.create(t,e,"buffer","Buffer feature by given radius",b)}},center:{create:function(t,e){return x.Control.create(t,e,"center","Measure Center",N)}},"center-of-mass":{create:function(t,e){return y.Control.create(t,e,"center-of-mass","Measure center of mass",w)}},centroid:{create:function(t,e){return F.Control.create(t,e,"centroid","Measure Centroid",k)}},circle:{create:function(t,e){return v.Control.create(t,e,"circle","Create circle",P)}},collect:{create:function(t,e){return S.Control.create(t,e,I,"Collect points within polygons",E)}},combine:{create:function(t,e){return M.Control.create(t,e,"combine","Combine feature collection",O)}},concave:{create:function(t,e){return z.Control.create(t,e,U,"Create Concave Hull",T)}},convex:{create:function(t,e){return j.Control.create(t,e,"convex","Create Convex Hull",K)}},destination:{create:function(t,e){return G.Control.create(t,e,L,"Find destination point from given point",q)}},difference:{create:function(t,e){return D.Control.create(t,e,"difference","Create Difference Polygon",H)}},distance:{create:function(t,e){return B.Control.create(t,e,A,"Find distance between points",R)}},envelope:{create:function(t,e){return Q.Control.create(t,e,"envelope","Measure Envelope",V)}},explode:{create:function(t,e){return _.Control.create(t,e,"explode","Explode feature collection",J)}},flip:{create:function(t,e){return Z.Control.create(t,e,"flip","Flip features coordinates",W)}},"hex-grid":{create:function(t,e){return X.Control.create(t,e,Y,"Generate Hex Grid",$)}},inside:{create:function(t,e){return tt.Control.create(t,e,"inside","Point inside polygon?",et)}},intersect:{create:function(t,e){return ot.Control.create(t,e,"intersect","Create Intersection Polygon",nt)}},isolines:{create:function(t,e){return rt.Control.create(t,e,it,"Create isolines",lt)}},kinks:{create:function(t,e){return st.Control.create(t,e,"kinks","Create polygon self-intersections",ut)}},"line-distance":{create:function(t,e){return ct.Control.create(t,e,at,"Measure Length",ft)}},"line-slice-along":{create:function(t,e){return gt.Control.create(t,e,mt,"Create line slice",pt)}},midpoint:{create:function(t,e){return ht.Control.create(t,e,"midpoint","Measure Midpoint",dt)}},nearest:{create:function(t,e){return Ct.Control.create(t,e,"nearest","Find set point nearest to first point",bt)}},planepoint:{create:function(t,e){return xt.Control.create(t,e,"planepoint","Triangulate a point in a plane",Nt)}},"point-grid":{create:function(t,e){return yt.Control.create(t,e,wt,"Generate Point Grid",Ft)}},"point-on-line":{create:function(t,e){return kt.Control.create(t,e,"point-on-line","Project point on line",vt)}},"point-on-surface":{create:function(t,e){return Pt.Control.create(t,e,"point-on-surface","Measure Point on Surface",St)}},popup:r,random:{create:function(t,e){return It.Control.create(t,e,Et,"Create random data",Mt)}},sample:{create:function(t,e){return Ot.Control.create(t,e,"sample","Randomly sample features",zt)}},simplify:{create:function(t,e){return Ut.Control.create(t,e,Tt,"Simplify shape",jt)}},"square-grid":{create:function(t,e){return Kt.Control.create(t,e,Gt,"Generate Square Grid",Lt)}},square:{create:function(t,e){return qt.Control.create(t,e,"square","Create Square",Dt)}},tag:{create:function(t,e){return Ht.Control.create(t,e,"tag","Perform spatial join of points and polygons",Bt)}},tesselate:{create:function(t,e){return At.Control.create(t,e,"tesselate","Create tesselation",Rt)}},tin:{create:function(t,e){return Qt.Control.create(t,e,"tin","Create TIN",Vt)}},toolbars:oe,"triangle-grid":{create:function(t,e){return ne.Control.create(t,e,re,"Generate Triangle Grid",ie)}},union:{create:function(t,e){return le.Control.create(t,e,"union","Create Union Polygon",se)}},utils:e,within:{create:function(t,e){return ue.Control.create(t,e,"within","Find points within polygons",ce)}}};const fe=function(t){this.toolbar=t};fe.prototype.callback=function(t,e,o){const n=this.toolbar.ol3turf.controls[t];if("area"===t)n.showMessage("area = "+e+" msq");else if("bearing"===t)n.showMessage("bearing = "+e+" degrees");else if("distance"===t)n.showMessage("distance = "+e+" "+o.units);else if("inside"===t){let t="Point is";!1===e&&(t+=" not"),t+=" inside polygon.",n.showMessage(t)}else"line-distance"===t?n.showMessage("length = "+e+" "+o.units):"planepoint"===t?n.showMessage("z = "+e):n.addFeatures(e)};const ge={controls:ae,Handler:fe,toolbars:oe},me=function(t){const e=this,o=t||{};o.ol3turf=o.ol3turf||{},void 0===o.ol3turf.controls&&(o.ol3turf.controls=ge.toolbars.all()),void 0===o.ol3turf.handler&&(o.ol3turf.handler=new ge.Handler(e)),void 0===o.ol3turf.style&&(o.ol3turf.style="ol3-turf-toolbar"),void 0===o.ol3turf.prefix&&(o.ol3turf.prefix="ol3-turf"),void 0===o.element&&(o.element=document.createElement("div")),""===o.element.className&&(o.element.className=o.ol3turf.style+" ol-unselectable ol-control");const n={};o.ol3turf.controls.forEach(function(t){if(void 0!==ge.controls[t]){const r=ge.controls[t].create(e,o.ol3turf.prefix);n[t]=r,o.element.appendChild(r.element)}}),this.ol3turf={controls:n,element:o.element,handler:o.ol3turf.handler},ol.control.Control.call(this,o)};return ol.inherits(me,ol.control.Control),{toolbars:oe,Toolbar:me}});
