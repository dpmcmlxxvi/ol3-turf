!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).ol3turf=e()}(this,function(){"use strict";const t={};function e(o,n,r,i){const l="ol3-turf-popup",c=document.getElementById(l);let a=null;if(null!==c&&null!==(a=c.parentNode)&&a.removeChild(c),null==o)return;let s=document.body;null!=r&&(s=r);const u=document.createElement("div");u.className=l,u.id=l,t.extend(i,u);const f=document.createElement("div");f.className="ol3-turf-popup-message",f.innerHTML=o;const g=document.createElement("button");g.className="ol3-turf-popup-button",g.innerHTML="OK",g.onclick=function(){null!=n&&n(),e()},g.type="button";const m=document.createElement("div");return m.className="ol3-turf-popup-button-container",m.appendChild(g),u.appendChild(f),u.appendChild(m),s.appendChild(u),u}t.extend=function(e,o){void 0!==e&&void 0!==o&&Object.keys(e).forEach(function(n){const r=e[n];if(null!==r&&"object"==typeof r)return void 0===o[n]&&(o[n]={}),void t.extend(r,o[n]);o[n]=r})},t.getClass=function(e,o){return"."+t.getName(e,o)},t.getCollection=function(t,e,o){const n=t.getFeatures();if(n.features.length<e)throw new Error("Number of features less than "+e);if(n.features.length>o)throw new Error("Number of features greater than "+o);return n},t.getControlInput=function(t,e,o,n){return{title:o,type:"input",attributes:{name:t,onclick:e,type:"submit",value:n}}},t.getControlNumber=function(t,e,o,n,r,i,l){return{title:e,type:"input",attributes:{id:t,name:t,min:i,max:l,step:r,title:o,type:"number",value:n}}},t.getControlSelect=function(t,e,o){return{title:e,type:"select",attributes:{id:t,name:t},options:o}},t.getControlText=function(t,e,o){return{title:e,type:"input",attributes:{id:t,name:t,title:o,type:"text"}}},t.getElement=function(e,o,n){return e+"[name='"+t.getName(o,n)+"']"},t.getFeatures=function(t,e,o,n){const r=[];if(e.features.forEach(function(e){t.indexOf(e.geometry.type)>-1&&r.push(e)}),r.length<o)throw new Error("Number of '"+t+"' features less than "+o);if(r.length>n)throw new Error("Number of '"+t+"' features greater than "+n);return r},t.getFormArray=function(e,o){const n=t.getFormString(e,o),r=[];return n.split(",").forEach(function(t){const e=parseFloat(t);if(Number(e)!==e)throw new Error("Invalid "+o);r.push(e)}),r},t.getFormInteger=function(t,e){const o=parseInt(document.getElementById(t).value,10);if(Number(o)!==o)throw new Error("Invalid "+e);return o},t.getFormNumber=function(t,e){const o=parseFloat(document.getElementById(t).value);if(Number(o)!==o)throw new Error("Invalid "+e);return o},t.getFormString=function(t,e){const o=document.getElementById(t).value;if(!o||!o.trim())throw new Error("Invalid "+e);return o},t.getId=function(e,o){return"#"+t.getName(e,o)},t.getLines=function(e,o,n){return t.getFeatures(["LineString"],e,o,n)},t.getName=function(t,e){void 0===e&&(e="ol3-turf");let o=e;return t.forEach(function(t){o+="-"+t}),o},t.getOptionsGeometry=function(){return[{text:"Points",attributes:{selected:"selected",value:"points"}},{text:"Polygons",attributes:{value:"polygons"}}]},t.getOptionsGrids=function(){return[{text:"Hexagons",attributes:{selected:"selected",value:"hexagons"}},{text:"Triangles",attributes:{value:"triangles"}}]},t.getOptionsQuality=function(){return[{text:"High",attributes:{value:"high"}},{text:"Low",attributes:{selected:"selected",value:"low"}}]},t.getOptionsUnits=function(){return[{text:"degrees",attributes:{value:"degrees"}},{text:"kilometers",attributes:{selected:"selected",value:"kilometers"}},{text:"miles",attributes:{value:"miles"}},{text:"radians",attributes:{value:"radians"}}]},t.getPoints=function(e,o,n){return t.getFeatures(["Point"],e,o,n)},t.getPolygons=function(e,o,n){return t.getFeatures(["Polygon"],e,o,n)},t.getPolygonsAll=function(e,o,n){return t.getFeatures(["Polygon","MultiPolygon"],e,o,n)};const o={form:function(e,o,n,r){let i=null;if(null===(i="string"==typeof e?document.getElementById(e):e))throw new Error("ol3turf.form: Parent element not found.");if(void 0===o)throw new Error("ol3turf.form: Form ID not provided.");if(void 0===n)throw new Error("ol3turf.form: Form controls not provided.");const l=document.createElement("form");l.id=o,l.className="ol3-turf-form ol-unselectable ol-control",l.setAttribute("onsubmit","return false;"),t.extend(r,l);const c=document.createElement("table");return c.className="ol3-turf-form-table",n.forEach(function(e){const o=document.createElement("tr");o.className="ol3-turf-form-row";const n=document.createElement("th");n.innerHTML=e.title,n.className="ol3-turf-form-header",o.appendChild(n);const r=document.createElement("td");r.className="ol3-turf-form-data";const i=document.createElement(e.type);i.className="ol3-turf-form-input",t.extend(e.attributes,i),"select"===e.type&&(i.className="ol3-turf-form-select",void 0!==e.options&&e.options.forEach(function(e){const o=document.createElement("option");o.innerHTML=e.text,o.className="ol3-turf-form-option",t.extend(e.attributes,o),i.appendChild(o)})),r.appendChild(i),o.appendChild(r),c.appendChild(o)}),l.appendChild(c),i.appendChild(l),l},popup:e,utils:t};function n(t){const e=t.getBoundingClientRect();let o=0,n=0;do{n+=t.offsetTop||0,o+=t.offsetLeft||0,t=t.offsetParent}while(t);return{bottom:n+e.height,height:e.height,left:o,right:o+e.width,top:n,width:e.width}}const r=function(t){const e=t||{},o=this;this.button=document.createElement("button"),this.button.addEventListener("click",this.run.bind(this),!1),this.button.addEventListener("touchstart",this.run.bind(this),!1),Object.keys(e).forEach(function(t){o.button[t]=e[t]}),this.element=document.createElement("div"),this.element.className="ol3-turf-control",this.element.appendChild(this.button),this.toolbar=null,this.form=null,this.prefix="ol3-turf"};r.prototype.action=function(){throw new Error("Control action not implemented!")},r.prototype.addFeatures=function(t){const e=this.getProjectionMap(),o=this.getProjectionTurf(),n=new ol.format.GeoJSON,r=new ol.layer.Vector({source:new ol.source.Vector({features:n.readFeatures(t,{dataProjection:o,featureProjection:e})})});this.getMap().addLayer(r)},r.prototype.getFeatures=function(){const t=this.getProjectionMap(),e=this.getProjectionTurf(),o=new ol.format.GeoJSON,n=[];return this.getSelectors().forEach(function(r){r.getFeatures().forEach(function(r){n.push(o.writeFeatureObject(r,{dataProjection:e,featureProjection:t}))})}),turf.featureCollection(n)},r.prototype.getFormPosition=function(t){const e=n(this.button),o=n(t),r=n(this.getMap().getTargetElement()),i=n(this.toolbar.ol3turf.element);return o.top=e.top,o.left=e.left,function(t,e,o,n){o.width>o.height?t.top=function(t,e,o,n){let r=0,i=o.bottom;return i+=r=n.top-e.top>.5*e.height?-o.height-t.height+-n.height/2:n.height/2}(t,e,o,n):t.left=function(t,e,o,n){let r=0,i=o.left+o.width;return i+=r=n.left-e.left>.5*e.width?-o.width-t.width+-n.width/2:n.width/2}(t,e,o,n)}(o,r,i,e),function(t,e,o){const n=e.right-(t.left+t.width),r=t.left+n;n<0&&r>0&&(t.left+=n-o.width/2)}(o,r,e),function(t,e,o){const n=e.bottom-(t.top+t.height),r=t.top+n;n<0&&r>0&&(t.top+=n-o.height/2)}(o,r,e),o.top-=r.top,o.left-=r.left,{top:o.top,left:o.left}},r.prototype.getMap=function(){if(null===this.toolbar)return null;return this.toolbar.getMap()},r.prototype.getProjectionMap=function(){let t="EPSG:3857";const e=this.getMap().getView().getProjection();return void 0!==e&&(t=e.getCode()),t},r.prototype.getProjectionTurf=function(){return"EPSG:4326"},r.prototype.getSelectors=function(){const t=[],e=this.getMap();return null===e?t:(e.getInteractions().forEach(function(e){e instanceof ol.interaction.Select&&t.push(e)}),t)},r.prototype.run=function(){try{this.action()}catch(t){this.showMessage(t.message)}},r.prototype.showForm=function(t,e){const n=this.toolbar.element.parentNode;if(null!==this.form&&(n.removeChild(this.form),this.form=null),void 0===t)return;void 0===e&&(e="ol3-turf-form"),this.form=o.form(n,e,t,{style:{visibility:"hidden"}});const r=this.getFormPosition(this.form);this.form.style.left=r.left+"px",this.form.style.top=r.top+"px",this.form.style.visibility="visible"},r.prototype.showMessage=function(t){const e=this.toolbar.ol3turf.element.parentNode,n=o.popup(t,null,e,{style:{visibility:"hidden"}}),r=this.getFormPosition(n);n.style.left=r.left+"px",n.style.top=r.top+"px",n.style.visibility="visible"},r.create=function(e,o,n,i,l){const c=t.getName([n]),a=t.getName(["control","button"]),s=t.getName([n],o),u=new r({className:c+" "+a,id:s,title:i});return u.prefix=o,u.toolbar=e,u.action=function(){return l(u)},u};const i="along",l=function(e){const o=t.getName([i,"cancel"],e.prefix),n=t.getName([i,"distance"],e.prefix),r=t.getName([i,"form"],e.prefix),l=t.getName([i,"ok"],e.prefix),c=t.getName([i,"units"],e.prefix),a=[t.getControlNumber(n,"Distance","Distance along the line","0","any","0"),t.getControlSelect(c,"Units",t.getOptionsUnits()),t.getControlInput(l,function(){try{const o=t.getCollection(e,1,1),r=t.getLines(o,1,1)[0],l=t.getFormNumber(n,"distance"),a=t.getFormString(c,"units"),s=turf.along(r,l,a);e.showForm();const u={line:r,distance:l,units:a};e.toolbar.ol3turf.handler.callback(i,s,u)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(a,r)};const c=function(e){const o=t.getCollection(e,1,1/0),n=turf.area(o),r={input:o};e.toolbar.ol3turf.handler.callback("area",n,r)};const a=function(e){const o=t.getCollection(e,2,2),n=t.getPoints(o,2,2),r=n[0],i=n[1],l=turf.bearing(r,i),c={start:r,end:i};e.toolbar.ol3turf.handler.callback("bearing",l,c)};const s=function(e){const o=t.getName(["bezier","cancel"],e.prefix),n=t.getName(["bezier","form"],e.prefix),r=t.getName(["bezier","ok"],e.prefix),i=t.getName(["bezier","resolution"],e.prefix),l=t.getName(["bezier","sharpness"],e.prefix),c=[t.getControlNumber(i,"Resolution","Time between points (milliseconds)","10000","any","0"),t.getControlNumber(l,"Sharpness","Measure of how curvy the path should be between splines","0.85","0.01","0","1"),t.getControlInput(r,function(){try{const o=t.getCollection(e,1,1),n=t.getLines(o,1,1)[0],r=t.getFormNumber(i,"resolution"),c=t.getFormNumber(l,"sharpness"),a=turf.bezier(n,r,c);e.showForm();const s={line:n,resolution:r,sharpness:c};e.toolbar.ol3turf.handler.callback("bezier",a,s)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(c,n)};const u=function(e){const o=t.getName(["buffer","cancel"],e.prefix),n=t.getName(["buffer","distance"],e.prefix),r=t.getName(["buffer","form"],e.prefix),i=t.getName(["buffer","ok"],e.prefix),l=t.getName(["buffer","units"],e.prefix),c=[t.getControlNumber(n,"Distance","Distance to draw the buffer","0","any","0"),t.getControlSelect(l,"Units",t.getOptionsUnits()),t.getControlInput(i,function(){try{const o=t.getCollection(e,1,1/0),r=t.getFormNumber(n,"distance"),i=t.getFormString(l,"units"),c=turf.buffer(o,r,i);e.showForm();const a={feature:o,distance:r,unit:i};e.toolbar.ol3turf.handler.callback("buffer",c,a)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(c,r)};const f=function(e){const o=t.getCollection(e,1,1/0),n=turf.center(o),r={features:o};e.toolbar.ol3turf.handler.callback("center",n,r)};const g=function(e){const o=t.getCollection(e,1,1/0),n=turf.centerOfMass(o),r={features:o};e.toolbar.ol3turf.handler.callback("center-of-mass",n,r)};const m=function(e){const o=t.getCollection(e,1,1/0),n=turf.centroid(o),r={features:o};e.toolbar.ol3turf.handler.callback("centroid",n,r)};const p=function(e){const o=t.getName(["circle","cancel"],e.prefix),n=t.getName(["circle","form"],e.prefix),r=t.getName(["circle","ok"],e.prefix),i=t.getName(["circle","radius"],e.prefix),l=t.getName(["circle","steps"],e.prefix),c=t.getName(["circle","units"],e.prefix),a=[t.getControlNumber(i,"Radius","Radius of the circle","0","any","0"),t.getControlNumber(l,"Steps","Number of steps around circle","3","1","3"),t.getControlSelect(c,"Units",t.getOptionsUnits()),t.getControlInput(r,function(){try{const o=t.getCollection(e,1,1),n=t.getPoints(o,1,1)[0],r=t.getFormNumber(i,"radius"),a=t.getFormNumber(l,"steps"),s=t.getFormString(c,"units"),u=turf.circle(n,r,a,s);e.showForm();const f={center:n,radius:r,steps:a,units:s};e.toolbar.ol3turf.handler.callback("circle",u,f)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(a,n)};const h="collect",d=function(e){const o=t.getName([h,"cancel"],e.prefix),n=t.getName([h,"form"],e.prefix),r=t.getName([h,"in","property"],e.prefix),i=t.getName([h,"ok"],e.prefix),l=t.getName([h,"out","property"],e.prefix),c=[t.getControlText(r,"In Property","Property to be nested from"),t.getControlText(l,"Out Property","Property to be nested into"),t.getControlInput(i,function(){try{const o=t.getCollection(e,2,1/0),n=t.getPoints(o,1,o.features.length-1),i=o.features.length-n.length,c=t.getPolygons(o,i,i),a=t.getFormString(r,"In-Property"),s=t.getFormString(l,"Out-Property"),u=turf.featureCollection(c),f=turf.featureCollection(n),g=turf.collect(u,f,a,s);e.showForm();const m={polygons:u,points:f,inProperty:a,outProperty:s};e.toolbar.ol3turf.handler.callback(h,g,m)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(c,n)};const b=function(e){const o=t.getCollection(e,1,1/0),n=turf.combine(o),r={fc:o};e.toolbar.ol3turf.handler.callback("combine",n,r)};const C="concave",x=function(e){const o=t.getName([C,"cancel"],e.prefix),n=t.getName([C,"form"],e.prefix),r=t.getName([C,"max","edge"],e.prefix),i=t.getName([C,"ok"],e.prefix),l=t.getName([C,"units"],e.prefix),c=[t.getControlNumber(r,"Max Edge Size","Maximum size of an edge necessary for part of the hull to become concave","0","any","0"),t.getControlSelect(l,"Units",t.getOptionsUnits()),t.getControlInput(i,function(){try{const o=t.getCollection(e,3,1/0),n=o.features.length,i=t.getPoints(o,n,n),c=t.getFormNumber(r,"Max Edge"),a=t.getFormString(l,"units"),s=turf.featureCollection(i),u=turf.concave(s,c,a);e.showForm();const f={points:s,maxEdge:c,units:a};e.toolbar.ol3turf.handler.callback(C,u,f)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(c,n)};const N=function(e){const o=t.getCollection(e,1,1/0),n=turf.convex(o),r={featurecollection:o};e.toolbar.ol3turf.handler.callback("convex",n,r)};const y="destination",w=function(e){const o=t.getName([y,"bearing"],e.prefix),n=t.getName([y,"cancel"],e.prefix),r=t.getName([y,"distance"],e.prefix),i=t.getName([y,"form"],e.prefix),l=t.getName([y,"ok"],e.prefix),c=t.getName([y,"units"],e.prefix),a=[t.getControlNumber(o,"Bearing","Bearing angle (degrees)","0","any","-180","180"),t.getControlNumber(r,"Distance","Distance from the starting point","0","any","0"),t.getControlSelect(c,"Units",t.getOptionsUnits()),t.getControlInput(l,function(){try{const n=t.getCollection(e,1,1),i=t.getPoints(n,1,1)[0],l=t.getFormNumber(r,"distance"),a=t.getFormNumber(o,"bearing"),s=t.getFormString(c,"units"),u=turf.destination(i,l,a,s);e.showForm();const f={from:i,distance:l,bearing:a,units:s};e.toolbar.ol3turf.handler.callback(y,u,f)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(n,function(){e.showForm()},"","Cancel")];e.showForm(a,i)};const F=function(e){const o=t.getCollection(e,2,2),n=t.getPolygons(o,2,2),r=n[0],i=n[1],l=turf.difference(r,i),c={poly1:r,poly2:i};e.toolbar.ol3turf.handler.callback("difference",l,c)};const k="distance",v=function(e){const o=t.getName([k,"cancel"],e.prefix),n=t.getName([k,"form"],e.prefix),r=t.getName([k,"ok"],e.prefix),i=t.getName([k,"units"],e.prefix),l=[t.getControlSelect(i,"Units",t.getOptionsUnits()),t.getControlInput(r,function(){try{const o=t.getCollection(e,2,2),n=t.getPoints(o,2,2),r=n[0],l=n[1],c=t.getFormString(i,"units"),a=turf.distance(r,l,c);e.showForm();const s={from:r,to:l,units:c};e.toolbar.ol3turf.handler.callback(k,a,s)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(l,n)};const P=function(e){const o=t.getCollection(e,1,1/0),n=turf.envelope(o),r={fc:o};e.toolbar.ol3turf.handler.callback("envelope",n,r)};const S=function(e){const o=t.getCollection(e,1,1/0),n=turf.explode(o),r={geojson:o};e.toolbar.ol3turf.handler.callback("explode",n,r)};const I=function(e){const o=t.getCollection(e,1,1/0),n=turf.flip(o),r={input:o};e.toolbar.ol3turf.handler.callback("flip",n,r)};const E="hex-grid",M=function(e){const o=t.getName([E,"cancel"],e.prefix),n=t.getName([E,"cell-size"],e.prefix),r=t.getName([E,"form"],e.prefix),i=t.getName([E,"type"],e.prefix),l=t.getName([E,"ok"],e.prefix),c=t.getName([E,"units"],e.prefix),a=[t.getControlNumber(n,"Cell Size","Dimension of cell","1","any","0"),t.getControlSelect(c,"Units",t.getOptionsUnits()),t.getControlSelect(i,"Type",t.getOptionsGrids()),t.getControlInput(l,function(){try{const o=t.getCollection(e,1,1/0),r=t.getFormNumber(n,"cell size"),l=t.getFormString(i,"grid type"),a=t.getFormString(c,"units"),s="triangles"===l,u=turf.bbox(o),f=turf.hexGrid(u,r,a,s);e.showForm();const g={bbox:u,cellSize:r,units:a,triangles:s};e.toolbar.ol3turf.handler.callback(E,f,g)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(a,r)};const O=function(e){const o=t.getCollection(e,2,2),n=t.getPoints(o,1,1),r=t.getPolygonsAll(o,1,1),i=n[0],l=r[0],c=turf.inside(i,l),a={point:i,polygon:l};e.toolbar.ol3turf.handler.callback("inside",c,a)};const z=function(e){const o=t.getCollection(e,2,2),n=t.getPolygonsAll(o,2,2),r=n[0],i=n[1],l=turf.intersect(r,i),c={poly1:r,poly2:i};e.toolbar.ol3turf.handler.callback("intersect",l,c)};const U="isolines",T=function(e){const o=t.getName([U,"breaks"],e.prefix),n=t.getName([U,"cancel"],e.prefix),r=t.getName([U,"form"],e.prefix),i=t.getName([U,"ok"],e.prefix),l=t.getName([U,"resolution"],e.prefix),c=t.getName([U,"z"],e.prefix),a=[t.getControlNumber(l,"Resolution","Resolution of the underlying grid","1","any","0.01"),t.getControlText(c,"Z Property","Property name in points from which z-values will be pulled"),t.getControlText(o,"Breaks","Comma separated list of where to draw contours"),t.getControlInput(i,function(){try{const n=t.getCollection(e,1,1/0),r=t.getFormArray(o,"breaks"),i=t.getFormNumber(l,"resolution"),a=t.getFormString(c,"z"),s=turf.isolines(n,a,i,r);e.showForm();const u={points:n,z:a,resolution:i,breaks:r};e.toolbar.ol3turf.handler.callback(U,s,u)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(n,function(){e.showForm()},"","Cancel")];e.showForm(a,r)};const j=function(e){const o=t.getCollection(e,1,1),n=t.getPolygons(o,1,1)[0],r=turf.kinks(n);if(0===r.features.length)throw new Error("No kinks found.");const i={polygon:n};e.toolbar.ol3turf.handler.callback("kinks",r,i)};const K="line-distance",G=function(e){const o=t.getName([K,"cancel"],e.prefix),n=t.getName([K,"form"],e.prefix),r=t.getName([K,"ok"],e.prefix),i=t.getName([K,"units"],e.prefix),l=[t.getControlSelect(i,"Units",t.getOptionsUnits()),t.getControlInput(r,function(){try{const o=t.getCollection(e,1,1/0),n=t.getFormString(i,"units"),r=turf.lineDistance(o,n);e.showForm();const l={line:o,units:n};e.toolbar.ol3turf.handler.callback(K,r,l)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(l,n)};const L="line-slice-along",q=function(e){const o=t.getName([L,"cancel"],e.prefix),n=t.getName([L,"form"],e.prefix),r=t.getName([L,"ok"],e.prefix),i=t.getName([L,"start"],e.prefix),l=t.getName([L,"stop"],e.prefix),c=t.getName([L,"units"],e.prefix),a=[t.getControlNumber(i,"Start","Starting distance along the line","0","any","0"),t.getControlNumber(l,"Stop","Stoping distance along the line","0","any","0"),t.getControlSelect(c,"Units",t.getOptionsUnits()),t.getControlInput(r,function(){try{const o=t.getCollection(e,1,1),n=t.getLines(o,1,1)[0],r=t.getFormNumber(i,"start"),a=t.getFormNumber(l,"stop");if(!0!=r<a)throw new Error("Start must be less than stop");const s=t.getFormString(c,"units"),u=turf.lineDistance(n,s);if(r>u)throw new Error("Start must be less than line length");if(a>u)throw new Error("Stop must be less than line length");const f=turf.lineSliceAlong(n,r,a,s);e.showForm();const g={line:n,start:r,stop:a,units:s};e.toolbar.ol3turf.handler.callback(L,f,g)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(a,n)};const D=function(e){const o=t.getCollection(e,2,2),n=t.getPoints(o,2,2),r=n[0],i=n[1],l=turf.midpoint(r,i),c={from:r,to:i};e.toolbar.ol3turf.handler.callback("midpoint",l,c)};const H=function(e){const o=t.getCollection(e,2,1/0),n=o.features.length,r=t.getPoints(o,n,n),i=r[0],l=turf.featureCollection(r.slice(1)),c=turf.nearest(i,l),a={targetPoint:i,points:l};e.toolbar.ol3turf.handler.callback("nearest",c,a)};const B=function(e){const o=t.getCollection(e,2,2),n=t.getPoints(o,1,1),r=t.getPolygons(o,1,1),i=n[0],l=r[0],c=turf.planepoint(i,l),a={point:i,triangle:l};e.toolbar.ol3turf.handler.callback("planepoint",c,a)};const A="point-grid",R=function(e){const o=t.getName([A,"cancel"],e.prefix),n=t.getName([A,"cell-size"],e.prefix),r=t.getName([A,"form"],e.prefix),i=t.getName([A,"ok"],e.prefix),l=t.getName([A,"units"],e.prefix),c=[t.getControlNumber(n,"Cell Size","Dimension of cell","1","any","0"),t.getControlSelect(l,"Units",t.getOptionsUnits()),t.getControlInput(i,function(){try{const o=t.getCollection(e,1,1/0),r=t.getFormNumber(n,"cell size"),i=t.getFormString(l,"units"),c=turf.bbox(o),a=turf.pointGrid(c,r,i);e.showForm();const s={bbox:c,cellSize:r,units:i};e.toolbar.ol3turf.handler.callback(A,a,s)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(c,r)};const Q=function(e){const o=t.getCollection(e,2,2),n=t.getPoints(o,1,1),r=t.getLines(o,1,1)[0],i=n[0],l=turf.pointOnLine(r,i),c={line:r,point:i};e.toolbar.ol3turf.handler.callback("point-on-line",l,c)};const V=function(e){const o=t.getCollection(e,1,1/0),n=turf.pointOnSurface(o),r={fc:o};e.toolbar.ol3turf.handler.callback("point-on-surface",n,r)};const _="random",J=function(e){const o=t.getName([_,"cancel"],e.prefix),n=t.getName([_,"count"],e.prefix),r=t.getName([_,"form"],e.prefix),i=t.getName([_,"max-radial-length"],e.prefix),l=t.getName([_,"num-vertices"],e.prefix),c=t.getName([_,"ok"],e.prefix),a=t.getName([_,"type"],e.prefix),s=[t.getControlSelect(a,"Type",t.getOptionsGeometry()),t.getControlNumber(n,"Count","How many geometries should be generated","1","1","1"),t.getControlNumber(l,"# Vertices","Used only for polygon type","10","1","3"),t.getControlNumber(i,"Max Length","Maximum degrees a polygon can extent outwards from its center (degrees)","10","0.01","0","180"),t.getControlInput(c,function(){try{let o=null;const r=t.getCollection(e,0,1/0);0!==r.features.length&&(o=turf.bbox(r));const c=t.getFormInteger(n,"count"),s=t.getFormInteger(i,"maximum radial length"),u=t.getFormInteger(l,"number of vertices"),f=t.getFormString(a,"type"),g={max_radial_length:s,num_vertices:u};null!==o&&(g.bbox=o);const m=turf.random(f,c,g);e.showForm();const p={type:f,count:c,options:g};e.toolbar.ol3turf.handler.callback(_,m,p)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(s,r)};const Z=function(e){const o=t.getName(["sample","cancel"],e.prefix),n=t.getName(["sample","count"],e.prefix),r=t.getName(["sample","form"],e.prefix),i=t.getName(["sample","ok"],e.prefix),l=[t.getControlNumber(n,"Count","Number of random features to sample","1","1","1"),t.getControlInput(i,function(){try{const o=t.getCollection(e,1,1/0),r=t.getFormInteger(n,"count");if(r>o.features.length)throw new Error("Feature count must be greater than sampling count.");const i=turf.sample(o,r);e.showForm();const l={featurecollection:o,num:r};e.toolbar.ol3turf.handler.callback("sample",i,l)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(l,r)};const W="simplify",X=function(e){const o=t.getName([W,"cancel"],e.prefix),n=t.getName([W,"form"],e.prefix),r=t.getName([W,"ok"],e.prefix),i=t.getName([W,"quality"],e.prefix),l=t.getName([W,"tolerance"],e.prefix),c=[t.getControlNumber(l,"Tolerance","Simplification tolerance","1","0.01","0"),t.getControlSelect(i,"Quality",t.getOptionsQuality()),t.getControlInput(r,function(){try{const o=t.getCollection(e,1,1/0),n=t.getFormNumber(l,"tolerance"),r="high"===t.getFormString(i,"quality"),c=turf.simplify(o,n,r);e.showForm();const a={feature:o,tolerance:n,highQuality:r};e.toolbar.ol3turf.handler.callback(W,c,a)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(c,n)};const Y="square-grid",$=function(e){const o=t.getName([Y,"cancel"],e.prefix),n=t.getName([Y,"cell-size"],e.prefix),r=t.getName([Y,"form"],e.prefix),i=t.getName([Y,"ok"],e.prefix),l=t.getName([Y,"units"],e.prefix),c=[t.getControlNumber(n,"Cell Size","Dimension of cell","1","any","0"),t.getControlSelect(l,"Units",t.getOptionsUnits()),t.getControlInput(i,function(){try{const o=t.getCollection(e,1,1/0),r=t.getFormNumber(n,"cell size"),i=t.getFormString(l,"units"),c=turf.bbox(o),a=turf.squareGrid(c,r,i);e.showForm();const s={bbox:c,cellSize:r,units:i};e.toolbar.ol3turf.handler.callback(Y,a,s)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(c,r)};const tt=function(e){const o=t.getCollection(e,1,1/0),n=turf.bbox(o),r=turf.square(n),i=turf.bboxPolygon(r),l={bbox:n};e.toolbar.ol3turf.handler.callback("square",i,l)};const et=function(e){const o=t.getName(["tag","cancel"],e.prefix),n=t.getName(["tag","field-property"],e.prefix),r=t.getName(["tag","form"],e.prefix),i=t.getName(["tag","ok"],e.prefix),l=t.getName(["tag","out-field-property"],e.prefix),c=[t.getControlText(n,"Field","Property in polygons to add to joined point features"),t.getControlText(l,"Out Field","Property in points in which to store joined property from polygons"),t.getControlInput(i,function(){try{const o=t.getCollection(e,2,1/0),r=t.getPoints(o,1,o.features.length-1),i=o.features.length-r.length,c=t.getPolygons(o,i,i),a=t.getFormString(n,"field"),s=t.getFormString(l,"out field"),u=turf.featureCollection(c),f=turf.featureCollection(r),g=turf.tag(f,u,a,s);e.showForm();const m={points:f,polygons:u,field:a,outField:s};e.toolbar.ol3turf.handler.callback("tag",g,m)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(c,r)};const ot=function(e){const o=t.getCollection(e,1,1),n=t.getPolygons(o,1,1)[0],r=turf.tesselate(n),i={polygon:n};e.toolbar.ol3turf.handler.callback("tesselate",r,i)};const nt=function(e){const o=t.getName(["tin","cancel"],e.prefix),n=t.getName(["tin","form"],e.prefix),r=t.getName(["tin","ok"],e.prefix),i=t.getName(["tin","z"],e.prefix),l=[t.getControlText(i,"Z","(Optional) Property from which to pull z values"),t.getControlInput(r,function(){try{let o=t.getCollection(e,3,1/0);const n=o.features.length,r=t.getPoints(o,n,n);o=turf.featureCollection(r);const l=t.getFormString(i,"z"),c=turf.tin(o,l),a={points:o,z:l};e.toolbar.ol3turf.handler.callback("tin",c,a)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(l,n)};function rt(){return["collect"]}function it(){return["nearest"]}function lt(){return["random","sample"]}function ct(){return["hex-grid","point-grid","square-grid","triangle-grid","tesselate"]}function at(){return["isolines","planepoint","tin"]}function st(){return["inside","tag","within"]}function ut(){return["distance","line-distance","area","bearing","center-of-mass","center","centroid","midpoint","point-on-surface","envelope","square","circle","along","destination"]}function ft(){return["combine","explode","flip","kinks","line-slice-along","point-on-line"]}function gt(){return["bezier","buffer","concave","convex","difference","intersect","simplify","union"]}var mt={aggregation:rt,all:function(){const t=[];return t.push("distance","line-distance","area","bearing","center-of-mass","center","centroid","midpoint","point-on-surface","envelope","square","circle","along","destination"),t.push("bezier","buffer","concave","convex","difference","intersect","simplify","union"),t.push("combine","explode","flip","kinks","line-slice-along","point-on-line"),t.push("inside","tag","within"),t.push("nearest"),t.push("collect"),t.push("random","sample"),t.push("isolines","planepoint","tin"),t.push("hex-grid","point-grid","square-grid","triangle-grid","tesselate"),t},classification:it,data:lt,grids:ct,interpolation:at,joins:st,measurement:ut,misc:ft,transformation:gt};const pt="triangle-grid",ht=function(e){const o=t.getName([pt,"cancel"],e.prefix),n=t.getName([pt,"cell-size"],e.prefix),r=t.getName([pt,"form"],e.prefix),i=t.getName([pt,"ok"],e.prefix),l=t.getName([pt,"units"],e.prefix),c=[t.getControlNumber(n,"Cell Size","Dimension of cell","1","any","0"),t.getControlSelect(l,"Units",t.getOptionsUnits()),t.getControlInput(i,function(){try{const o=t.getCollection(e,1,1/0),r=t.getFormNumber(n,"cell size"),i=t.getFormString(l,"units"),c=turf.bbox(o),a=turf.triangleGrid(c,r,i);e.showForm();const s={bbox:c,cellSize:r,units:i};e.toolbar.ol3turf.handler.callback(pt,a,s)}catch(t){e.showMessage(t)}},"","OK"),t.getControlInput(o,function(){e.showForm()},"","Cancel")];e.showForm(c,r)};const dt=function(e){const o=t.getCollection(e,2,2),n=t.getPolygons(o,2,2),r=n[0],i=n[1],l=turf.union(r,i),c={poly1:r,poly2:i};e.toolbar.ol3turf.handler.callback("union",l,c)};const bt=function(e){const o=t.getCollection(e,2,1/0),n=t.getPoints(o,1,o.features.length-1),r=o.features.length-n.length,i=t.getPolygons(o,r,r),l=turf.featureCollection(n),c=turf.featureCollection(i),a=turf.within(l,c);if(0===a.features.length)throw new Error("No points found within.");const s={points:l,polygons:c};e.toolbar.ol3turf.handler.callback("within",a,s)};var Ct={along:{create:function(t,e){return r.create(t,e,i,"Find point along line at given distance",l)}},area:{create:function(t,e){return r.create(t,e,"area","Measure Area",c)}},bearing:{create:function(t,e){return r.create(t,e,"bearing","Measure Bearing",a)}},bezier:{create:function(t,e){return r.create(t,e,"bezier","Create bezier curve of line",s)}},buffer:{create:function(t,e){return r.create(t,e,"buffer","Buffer feature by given radius",u)}},center:{create:function(t,e){return r.create(t,e,"center","Measure Center",f)}},"center-of-mass":{create:function(t,e){return r.create(t,e,"center-of-mass","Measure center of mass",g)}},centroid:{create:function(t,e){return r.create(t,e,"centroid","Measure Centroid",m)}},circle:{create:function(t,e){return r.create(t,e,"circle","Create circle",p)}},collect:{create:function(t,e){return r.create(t,e,h,"Collect points within polygons",d)}},combine:{create:function(t,e){return r.create(t,e,"combine","Combine feature collection",b)}},concave:{create:function(t,e){return r.create(t,e,C,"Create Concave Hull",x)}},convex:{create:function(t,e){return r.create(t,e,"convex","Create Convex Hull",N)}},destination:{create:function(t,e){return r.create(t,e,y,"Find destination point from given point",w)}},difference:{create:function(t,e){return r.create(t,e,"difference","Create Difference Polygon",F)}},distance:{create:function(t,e){return r.create(t,e,k,"Find distance between points",v)}},envelope:{create:function(t,e){return r.create(t,e,"envelope","Measure Envelope",P)}},explode:{create:function(t,e){return r.create(t,e,"explode","Explode feature collection",S)}},flip:{create:function(t,e){return r.create(t,e,"flip","Flip features coordinates",I)}},"hex-grid":{create:function(t,e){return r.create(t,e,E,"Generate Hex Grid",M)}},inside:{create:function(t,e){return r.create(t,e,"inside","Point inside polygon?",O)}},intersect:{create:function(t,e){return r.create(t,e,"intersect","Create Intersection Polygon",z)}},isolines:{create:function(t,e){return r.create(t,e,U,"Create isolines",T)}},kinks:{create:function(t,e){return r.create(t,e,"kinks","Create polygon self-intersections",j)}},"line-distance":{create:function(t,e){return r.create(t,e,K,"Measure Length",G)}},"line-slice-along":{create:function(t,e){return r.create(t,e,L,"Create line slice",q)}},midpoint:{create:function(t,e){return r.create(t,e,"midpoint","Measure Midpoint",D)}},nearest:{create:function(t,e){return r.create(t,e,"nearest","Find set point nearest to first point",H)}},planepoint:{create:function(t,e){return r.create(t,e,"planepoint","Triangulate a point in a plane",B)}},"point-grid":{create:function(t,e){return r.create(t,e,A,"Generate Point Grid",R)}},"point-on-line":{create:function(t,e){return r.create(t,e,"point-on-line","Project point on line",Q)}},"point-on-surface":{create:function(t,e){return r.create(t,e,"point-on-surface","Measure Point on Surface",V)}},popup:e,random:{create:function(t,e){return r.create(t,e,_,"Create random data",J)}},sample:{create:function(t,e){return r.create(t,e,"sample","Randomly sample features",Z)}},simplify:{create:function(t,e){return r.create(t,e,W,"Simplify shape",X)}},"square-grid":{create:function(t,e){return r.create(t,e,Y,"Generate Square Grid",$)}},square:{create:function(t,e){return r.create(t,e,"square","Create Square",tt)}},tag:{create:function(t,e){return r.create(t,e,"tag","Perform spatial join of points and polygons",et)}},tesselate:{create:function(t,e){return r.create(t,e,"tesselate","Create tesselation",ot)}},tin:{create:function(t,e){return r.create(t,e,"tin","Create TIN",nt)}},toolbars:mt,"triangle-grid":{create:function(t,e){return r.create(t,e,pt,"Generate Triangle Grid",ht)}},union:{create:function(t,e){return r.create(t,e,"union","Create Union Polygon",dt)}},utils:t,within:{create:function(t,e){return r.create(t,e,"within","Find points within polygons",bt)}}};const xt=function(t){this.toolbar=t};xt.prototype.callback=function(t,e,o){const n=this.toolbar.ol3turf.controls[t];if("area"===t)n.showMessage("area = "+e+" msq");else if("bearing"===t)n.showMessage("bearing = "+e+" degrees");else if("distance"===t)n.showMessage("distance = "+e+" "+o.units);else if("inside"===t){let t="Point is";!1===e&&(t+=" not"),t+=" inside polygon.",n.showMessage(t)}else"line-distance"===t?n.showMessage("length = "+e+" "+o.units):"planepoint"===t?n.showMessage("z = "+e):n.addFeatures(e)};const Nt={controls:Ct,Handler:xt,toolbars:mt},yt=function(t){const e=this,o=t||{};o.ol3turf=o.ol3turf||{},void 0===o.ol3turf.controls&&(o.ol3turf.controls=Nt.toolbars.all()),void 0===o.ol3turf.handler&&(o.ol3turf.handler=new Nt.Handler(e)),void 0===o.ol3turf.style&&(o.ol3turf.style="ol3-turf-toolbar"),void 0===o.ol3turf.prefix&&(o.ol3turf.prefix="ol3-turf"),void 0===o.element&&(o.element=document.createElement("div")),""===o.element.className&&(o.element.className=o.ol3turf.style+" ol-unselectable ol-control");const n={};o.ol3turf.controls.forEach(function(t){if(void 0!==Nt.controls[t]){const r=Nt.controls[t].create(e,o.ol3turf.prefix);n[t]=r,o.element.appendChild(r.element)}}),this.ol3turf={controls:n,element:o.element,handler:o.ol3turf.handler},ol.control.Control.call(this,o)};return ol.inherits(yt,ol.control.Control),{toolbars:mt,Toolbar:yt}});
