!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).ol3turf=e()}(this,function(){"use strict";var t=function(t){return t.utils.extend=function(e,r){void 0!==e&&void 0!==r&&Object.keys(e).forEach(function(o){var n=e[o];if(null!==n&&"object"==typeof n)return void 0===r[o]&&(r[o]={}),void t.utils.extend(n,r[o]);r[o]=n})},t.utils.getClass=function(e,r){return"."+t.utils.getName(e,r)},t.utils.getCollection=function(t,e,r){var o=t.getFeatures();if(o.features.length<e)throw new Error("Number of features less than "+e);if(o.features.length>r)throw new Error("Number of features greater than "+r);return o},t.utils.getControlInput=function(t,e,r,o){return{title:r,type:"input",attributes:{name:t,onclick:e,type:"submit",value:o}}},t.utils.getControlNumber=function(t,e,r,o,n,i,l){return{title:e,type:"input",attributes:{id:t,name:t,min:i,max:l,step:n,title:r,type:"number",value:o}}},t.utils.getControlSelect=function(t,e,r){return{title:e,type:"select",attributes:{id:t,name:t},options:r}},t.utils.getControlText=function(t,e,r){return{title:e,type:"input",attributes:{id:t,name:t,title:r,type:"text"}}},t.utils.getElement=function(e,r,o){return e+"[name='"+t.utils.getName(r,o)+"']"},t.utils.getFeatures=function(t,e,r,o){var n=[];if(e.features.forEach(function(e){t.indexOf(e.geometry.type)>-1&&n.push(e)}),n.length<r)throw new Error("Number of '"+t+"' features less than "+r);if(n.length>o)throw new Error("Number of '"+t+"' features greater than "+o);return n},t.utils.getFormArray=function(e,r){var o=t.utils.getFormString(e,r),n=[];return o.split(",").forEach(function(t){var e=parseFloat(t);if(Number(e)!==e)throw new Error("Invalid "+r);n.push(e)}),n},t.utils.getFormInteger=function(t,e){var r=parseInt(document.getElementById(t).value,10);if(Number(r)!==r)throw new Error("Invalid "+e);return r},t.utils.getFormNumber=function(t,e){var r=parseFloat(document.getElementById(t).value);if(Number(r)!==r)throw new Error("Invalid "+e);return r},t.utils.getFormString=function(t,e){var r=document.getElementById(t).value;if(!r||!r.trim())throw new Error("Invalid "+e);return r},t.utils.getId=function(e,r){return"#"+t.utils.getName(e,r)},t.utils.getLines=function(e,r,o){return t.utils.getFeatures(["LineString"],e,r,o)},t.utils.getName=function(t,e){void 0===e&&(e="ol3-turf");var r=e;return t.forEach(function(t){r+="-"+t}),r},t.utils.getOptionsGeometry=function(){return[{text:"Points",attributes:{selected:"selected",value:"points"}},{text:"Polygons",attributes:{value:"polygons"}}]},t.utils.getOptionsGrids=function(){return[{text:"Hexagons",attributes:{selected:"selected",value:"hexagons"}},{text:"Triangles",attributes:{value:"triangles"}}]},t.utils.getOptionsQuality=function(){return[{text:"High",attributes:{value:"high"}},{text:"Low",attributes:{selected:"selected",value:"low"}}]},t.utils.getOptionsUnits=function(){return[{text:"degrees",attributes:{value:"degrees"}},{text:"kilometers",attributes:{selected:"selected",value:"kilometers"}},{text:"miles",attributes:{value:"miles"}},{text:"radians",attributes:{value:"radians"}}]},t.utils.getPoints=function(e,r,o){return t.utils.getFeatures(["Point"],e,r,o)},t.utils.getPolygons=function(e,r,o){return t.utils.getFeatures(["Polygon"],e,r,o)},t.utils.getPolygonsAll=function(e,r,o){return t.utils.getFeatures(["Polygon","MultiPolygon"],e,r,o)},t.utils}({utils:{}}||{});var e=function(t){return function(e,r,o,n){var i=null;if(null===(i="string"==typeof e?document.getElementById(e):e))throw new Error("ol3turf.form: Parent element not found.");if(void 0===r)throw new Error("ol3turf.form: Form ID not provided.");if(void 0===o)throw new Error("ol3turf.form: Form controls not provided.");var l=document.createElement("form");l.id=r,l.className="ol3-turf-form ol-unselectable ol-control",l.setAttribute("onsubmit","return false;"),t.utils.extend(n,l);var u=document.createElement("table");return u.className="ol3-turf-form-table",o.forEach(function(e){var r=document.createElement("tr");r.className="ol3-turf-form-row";var o=document.createElement("th");o.innerHTML=e.title,o.className="ol3-turf-form-header",r.appendChild(o);var n=document.createElement("td");n.className="ol3-turf-form-data";var i=document.createElement(e.type);i.className="ol3-turf-form-input",t.utils.extend(e.attributes,i),"select"===e.type&&(i.className="ol3-turf-form-select",void 0!==e.options&&e.options.forEach(function(e){var r=document.createElement("option");r.innerHTML=e.text,r.className="ol3-turf-form-option",t.utils.extend(e.attributes,r),i.appendChild(r)})),n.appendChild(i),r.appendChild(n),u.appendChild(r)}),l.appendChild(u),i.appendChild(l),l}}({utils:t}||{});var r=function(t){return function(e,r,o,n){var i="ol3-turf-popup",l=document.getElementById(i),u=null;if(null!==l&&null!==(u=l.parentNode)&&u.removeChild(l),null!=e){var a=document.body;null!=o&&(a=o);var s=document.createElement("div");s.className=i,s.id=i,t.utils.extend(n,s);var c=document.createElement("div");c.className="ol3-turf-popup-message",c.innerHTML=e;var f=document.createElement("button");f.className="ol3-turf-popup-button",f.innerHTML="OK",f.onclick=function(){null!=r&&r(),t.popup()},f.type="button";var g=document.createElement("div");return g.className="ol3-turf-popup-button-container",g.appendChild(f),s.appendChild(c),s.appendChild(g),a.appendChild(s),s}}}({utils:t}||{});var o=function(t){function e(t){var e=t.getBoundingClientRect(),r=0,o=0;do{o+=t.offsetTop||0,r+=t.offsetLeft||0,t=t.offsetParent}while(t);return{bottom:o+e.height,height:e.height,left:r,right:r+e.width,top:o,width:e.width}}var r=function(t){var e=t||{},r=this;this.button=document.createElement("button"),this.button.addEventListener("click",this.run.bind(this),!1),this.button.addEventListener("touchstart",this.run.bind(this),!1),Object.keys(e).forEach(function(t){r.button[t]=e[t]}),this.element=document.createElement("div"),this.element.className="ol3-turf-control",this.element.appendChild(this.button),this.toolbar=null,this.form=null,this.prefix="ol3-turf"};return r.prototype.action=function(){throw new Error("Control action not implemented!")},r.prototype.addFeatures=function(t){var e=this.getProjectionMap(),r=this.getProjectionTurf(),o=new ol.format.GeoJSON,n=new ol.layer.Vector({source:new ol.source.Vector({features:o.readFeatures(t,{dataProjection:r,featureProjection:e})})});this.getMap().addLayer(n)},r.prototype.getFeatures=function(){var t=this.getProjectionMap(),e=this.getProjectionTurf(),r=new ol.format.GeoJSON,o=[];return this.getSelectors().forEach(function(n){n.getFeatures().forEach(function(n){o.push(r.writeFeatureObject(n,{dataProjection:e,featureProjection:t}))})}),turf.featureCollection(o)},r.prototype.getFormPosition=function(t){var r=e(this.button),o=e(t),n=e(this.getMap().getTargetElement()),i=e(this.toolbar.ol3turf.element);return o.top=r.top,o.left=r.left,function(t,e,r,o){r.width>r.height?t.top=function(t,e,r,o){var n=r.bottom;return n+=o.top-e.top>.5*e.height?-r.height-t.height+-o.height/2:o.height/2}(t,e,r,o):t.left=function(t,e,r,o){var n=r.left+r.width;return n+=o.left-e.left>.5*e.width?-r.width-t.width+-o.width/2:o.width/2}(t,e,r,o)}(o,n,i,r),function(t,e,r){var o=e.right-(t.left+t.width),n=t.left+o;o<0&&n>0&&(t.left+=o-r.width/2)}(o,n,r),function(t,e,r){var o=e.bottom-(t.top+t.height),n=t.top+o;o<0&&n>0&&(t.top+=o-r.height/2)}(o,n,r),o.top-=n.top,o.left-=n.left,{top:o.top,left:o.left}},r.prototype.getMap=function(){return null===this.toolbar?null:this.toolbar.getMap()},r.prototype.getProjectionMap=function(){var t="EPSG:3857",e=this.getMap().getView().getProjection();return void 0!==e&&(t=e.getCode()),t},r.prototype.getProjectionTurf=function(){return"EPSG:4326"},r.prototype.getSelectors=function(){var t=[],e=this.getMap();return null===e?t:(e.getInteractions().forEach(function(e){e instanceof ol.interaction.Select&&t.push(e)}),t)},r.prototype.run=function(){try{this.action()}catch(t){this.showMessage(t.message)}},r.prototype.showForm=function(e,r){var o=this.toolbar.element.parentNode;if(null!==this.form&&(o.removeChild(this.form),this.form=null),void 0!==e){void 0===r&&(r="ol3-turf-form"),this.form=t.form(o,r,e,{style:{visibility:"hidden"}});var n=this.getFormPosition(this.form);this.form.style.left=n.left+"px",this.form.style.top=n.top+"px",this.form.style.visibility="visible"}},r.prototype.showMessage=function(e){var r=this.toolbar.ol3turf.element.parentNode,o=t.popup(e,null,r,{style:{visibility:"hidden"}}),n=this.getFormPosition(o);o.style.left=n.left+"px",o.style.top=n.top+"px",o.style.visibility="visible"},r.create=function(e,o,n,i,l){var u=t.utils.getName([n]),a=t.utils.getName(["control","button"]),s=t.utils.getName([n],o),c=new r({className:u+" "+a,id:s,title:i});return c.prefix=o,c.toolbar=e,c.action=function(){return l(c)},c},r}({Control:o,form:e,popup:r,utils:t}||{});var n=function(t){var e="along",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"distance"],r.prefix),i=t.utils.getName([e,"form"],r.prefix),l=t.utils.getName([e,"ok"],r.prefix),u=t.utils.getName([e,"units"],r.prefix);var a=[t.utils.getControlNumber(n,"Distance","Distance along the line","0","any","0"),t.utils.getControlSelect(u,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{var o=t.utils.getCollection(r,1,1),i=t.utils.getLines(o,1,1)[0],l=t.utils.getFormNumber(n,"distance"),a=t.utils.getFormString(u,"units"),s=turf.along(i,l,a);r.showForm();var c={line:i,distance:l,units:a};r.toolbar.ol3turf.handler.callback(e,s,c)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(a,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Find point along line at given distance",r)}}}({Control:o,utils:t}||{});var i=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1/0),o=turf.area(r),n={input:r};e.toolbar.ol3turf.handler.callback("area",o,n)};return{create:function(r,o){return t.Control.create(r,o,"area","Measure Area",e)}}}({Control:o,utils:t}||{});var l=function(t){var e=function(e){var r=t.utils.getCollection(e,2,2),o=t.utils.getPoints(r,2,2),n=o[0],i=o[1],l=turf.bearing(n,i),u={start:n,end:i};e.toolbar.ol3turf.handler.callback("bearing",l,u)};return{create:function(r,o){return t.Control.create(r,o,"bearing","Measure Bearing",e)}}}({Control:o,utils:t}||{});var u=function(t){var e="bezier",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"form"],r.prefix),i=t.utils.getName([e,"ok"],r.prefix),l=t.utils.getName([e,"resolution"],r.prefix),u=t.utils.getName([e,"sharpness"],r.prefix);var a=[t.utils.getControlNumber(l,"Resolution","Time between points (milliseconds)","10000","any","0"),t.utils.getControlNumber(u,"Sharpness","Measure of how curvy the path should be between splines","0.85","0.01","0","1"),t.utils.getControlInput(i,function(){try{var o=t.utils.getCollection(r,1,1),n=t.utils.getLines(o,1,1)[0],i=t.utils.getFormNumber(l,"resolution"),a=t.utils.getFormNumber(u,"sharpness"),s=turf.bezier(n,i,a);r.showForm();var c={line:n,resolution:i,sharpness:a};r.toolbar.ol3turf.handler.callback(e,s,c)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(a,n)};return{create:function(o,n){return t.Control.create(o,n,e,"Create bezier curve of line",r)}}}({Control:o,utils:t}||{});var a=function(t){var e="buffer",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"distance"],r.prefix),i=t.utils.getName([e,"form"],r.prefix),l=t.utils.getName([e,"ok"],r.prefix),u=t.utils.getName([e,"units"],r.prefix);var a=[t.utils.getControlNumber(n,"Distance","Distance to draw the buffer","0","any","0"),t.utils.getControlSelect(u,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{var o=t.utils.getCollection(r,1,1/0),i=t.utils.getFormNumber(n,"distance"),l=t.utils.getFormString(u,"units"),a=turf.buffer(o,i,l);r.showForm();var s={feature:o,distance:i,unit:l};r.toolbar.ol3turf.handler.callback(e,a,s)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(a,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Buffer feature by given radius",r)}}}({Control:o,utils:t}||{});var s=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1/0),o=turf.center(r),n={features:r};e.toolbar.ol3turf.handler.callback("center",o,n)};return{create:function(r,o){return t.Control.create(r,o,"center","Measure Center",e)}}}({Control:o,utils:t}||{});var c=function(t){var e="center-of-mass",r=function(r){var o=t.utils.getCollection(r,1,1/0),n=turf.centerOfMass(o),i={features:o};r.toolbar.ol3turf.handler.callback(e,n,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Measure center of mass",r)}}}({Control:o,utils:t}||{});var f=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1/0),o=turf.centroid(r),n={features:r};e.toolbar.ol3turf.handler.callback("centroid",o,n)};return{create:function(r,o){return t.Control.create(r,o,"centroid","Measure Centroid",e)}}}({Control:o,utils:t}||{});var g=function(t){var e="circle",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"form"],r.prefix),i=t.utils.getName([e,"ok"],r.prefix),l=t.utils.getName([e,"radius"],r.prefix),u=t.utils.getName([e,"steps"],r.prefix),a=t.utils.getName([e,"units"],r.prefix);var s=[t.utils.getControlNumber(l,"Radius","Radius of the circle","0","any","0"),t.utils.getControlNumber(u,"Steps","Number of steps around circle","3","1","3"),t.utils.getControlSelect(a,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(i,function(){try{var o=t.utils.getCollection(r,1,1),n=t.utils.getPoints(o,1,1)[0],i=t.utils.getFormNumber(l,"radius"),s=t.utils.getFormNumber(u,"steps"),c=t.utils.getFormString(a,"units"),f=turf.circle(n,i,s,c);r.showForm();var g={center:n,radius:i,steps:s,units:c};r.toolbar.ol3turf.handler.callback(e,f,g)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(s,n)};return{create:function(o,n){return t.Control.create(o,n,e,"Create circle",r)}}}({Control:o,utils:t}||{});var p=function(t){var e="collect",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"form"],r.prefix),i=t.utils.getName([e,"in","property"],r.prefix),l=t.utils.getName([e,"ok"],r.prefix),u=t.utils.getName([e,"out","property"],r.prefix);var a=[t.utils.getControlText(i,"In Property","Property to be nested from"),t.utils.getControlText(u,"Out Property","Property to be nested into"),t.utils.getControlInput(l,function(){try{var o=t.utils.getCollection(r,2,1/0),n=t.utils.getPoints(o,1,o.features.length-1),l=o.features.length-n.length,a=t.utils.getPolygons(o,l,l),s=t.utils.getFormString(i,"In-Property"),c=t.utils.getFormString(u,"Out-Property"),f=turf.featureCollection(a),g=turf.featureCollection(n),p=turf.collect(f,g,s,c);r.showForm();var m={polygons:f,points:g,inProperty:s,outProperty:c};r.toolbar.ol3turf.handler.callback(e,p,m)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(a,n)};return{create:function(o,n){return t.Control.create(o,n,e,"Collect points within polygons",r)}}}({Control:o,utils:t}||{});var m=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1/0),o=turf.combine(r),n={fc:r};e.toolbar.ol3turf.handler.callback("combine",o,n)};return{create:function(r,o){return t.Control.create(r,o,"combine","Combine feature collection",e)}}}({Control:o,utils:t}||{});var h=function(t){var e="concave",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"form"],r.prefix),i=t.utils.getName([e,"max","edge"],r.prefix),l=t.utils.getName([e,"ok"],r.prefix),u=t.utils.getName([e,"units"],r.prefix);var a=[t.utils.getControlNumber(i,"Max Edge Size","Maximum size of an edge necessary for part of the hull to become concave","0","any","0"),t.utils.getControlSelect(u,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{var o=t.utils.getCollection(r,3,1/0),n=o.features.length,l=t.utils.getPoints(o,n,n),a=t.utils.getFormNumber(i,"Max Edge"),s=t.utils.getFormString(u,"units"),c=turf.featureCollection(l),f=turf.concave(c,a,s);r.showForm();var g={points:c,maxEdge:a,units:s};r.toolbar.ol3turf.handler.callback(e,f,g)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(a,n)};return{create:function(o,n){return t.Control.create(o,n,e,"Create Concave Hull",r)}}}({Control:o,utils:t}||{});var d=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1/0),o=turf.convex(r),n={featurecollection:r};e.toolbar.ol3turf.handler.callback("convex",o,n)};return{create:function(r,o){return t.Control.create(r,o,"convex","Create Convex Hull",e)}}}({Control:o,utils:t}||{});var v=function(t){var e="destination",r=function(r){var o=t.utils.getName([e,"bearing"],r.prefix),n=t.utils.getName([e,"cancel"],r.prefix),i=t.utils.getName([e,"distance"],r.prefix),l=t.utils.getName([e,"form"],r.prefix),u=t.utils.getName([e,"ok"],r.prefix),a=t.utils.getName([e,"units"],r.prefix);var s=[t.utils.getControlNumber(o,"Bearing","Bearing angle (degrees)","0","any","-180","180"),t.utils.getControlNumber(i,"Distance","Distance from the starting point","0","any","0"),t.utils.getControlSelect(a,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(u,function(){try{var n=t.utils.getCollection(r,1,1),l=t.utils.getPoints(n,1,1)[0],u=t.utils.getFormNumber(i,"distance"),s=t.utils.getFormNumber(o,"bearing"),c=t.utils.getFormString(a,"units"),f=turf.destination(l,u,s,c);r.showForm();var g={from:l,distance:u,bearing:s,units:c};r.toolbar.ol3turf.handler.callback(e,f,g)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){r.showForm()},"","Cancel")];r.showForm(s,l)};return{create:function(o,n){return t.Control.create(o,n,e,"Find destination point from given point",r)}}}({Control:o,utils:t}||{});var C=function(t){var e=function(e){var r=t.utils.getCollection(e,2,2),o=t.utils.getPolygons(r,2,2),n=o[0],i=o[1],l=turf.difference(n,i),u={poly1:n,poly2:i};e.toolbar.ol3turf.handler.callback("difference",l,u)};return{create:function(r,o){return t.Control.create(r,o,"difference","Create Difference Polygon",e)}}}({Control:o,utils:t}||{});var b=function(t){var e="distance",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"form"],r.prefix),i=t.utils.getName([e,"ok"],r.prefix),l=t.utils.getName([e,"units"],r.prefix);var u=[t.utils.getControlSelect(l,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(i,function(){try{var o=t.utils.getCollection(r,2,2),n=t.utils.getPoints(o,2,2),i=n[0],u=n[1],a=t.utils.getFormString(l,"units"),s=turf.distance(i,u,a);r.showForm();var c={from:i,to:u,units:a};r.toolbar.ol3turf.handler.callback(e,s,c)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(u,n)};return{create:function(o,n){return t.Control.create(o,n,e,"Find distance between points",r)}}}({Control:o,utils:t}||{});var y=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1/0),o=turf.envelope(r),n={fc:r};e.toolbar.ol3turf.handler.callback("envelope",o,n)};return{create:function(r,o){return t.Control.create(r,o,"envelope","Measure Envelope",e)}}}({Control:o,utils:t}||{});var x=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1/0),o=turf.explode(r),n={geojson:r};e.toolbar.ol3turf.handler.callback("explode",o,n)};return{create:function(r,o){return t.Control.create(r,o,"explode","Explode feature collection",e)}}}({Control:o,utils:t}||{});var N=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1/0),o=turf.flip(r),n={input:r};e.toolbar.ol3turf.handler.callback("flip",o,n)};return{create:function(r,o){return t.Control.create(r,o,"flip","Flip features coordinates",e)}}}({Control:o,utils:t}||{});var w=function(t){var e="hex-grid",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"cell-size"],r.prefix),i=t.utils.getName([e,"form"],r.prefix),l=t.utils.getName([e,"type"],r.prefix),u=t.utils.getName([e,"ok"],r.prefix),a=t.utils.getName([e,"units"],r.prefix);var s=[t.utils.getControlNumber(n,"Cell Size","Dimension of cell","1","any","0"),t.utils.getControlSelect(a,"Units",t.utils.getOptionsUnits()),t.utils.getControlSelect(l,"Type",t.utils.getOptionsGrids()),t.utils.getControlInput(u,function(){try{var o=t.utils.getCollection(r,1,1/0),i=t.utils.getFormNumber(n,"cell size"),u=t.utils.getFormString(l,"grid type"),s=t.utils.getFormString(a,"units"),c="triangles"===u,f=turf.bbox(o),g=turf.hexGrid(f,i,s,c);r.showForm();var p={bbox:f,cellSize:i,units:s,triangles:c};r.toolbar.ol3turf.handler.callback(e,g,p)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(s,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Generate Hex Grid",r)}}}({Control:o,utils:t}||{});var F=function(t){var e=function(e){var r=t.utils.getCollection(e,2,2),o=t.utils.getPoints(r,1,1),n=t.utils.getPolygonsAll(r,1,1),i=o[0],l=n[0],u=turf.inside(i,l),a={point:i,polygon:l};e.toolbar.ol3turf.handler.callback("inside",u,a)};return{create:function(r,o){return t.Control.create(r,o,"inside","Point inside polygon?",e)}}}({Control:o,utils:t}||{});var k=function(t){var e=function(e){var r=t.utils.getCollection(e,2,2),o=t.utils.getPolygonsAll(r,2,2),n=o[0],i=o[1],l=turf.intersect(n,i),u={poly1:n,poly2:i};e.toolbar.ol3turf.handler.callback("intersect",l,u)};return{create:function(r,o){return t.Control.create(r,o,"intersect","Create Intersection Polygon",e)}}}({Control:o,utils:t}||{});var P=function(t){var e="isolines",r=function(r){var o=t.utils.getName([e,"breaks"],r.prefix),n=t.utils.getName([e,"cancel"],r.prefix),i=t.utils.getName([e,"form"],r.prefix),l=t.utils.getName([e,"ok"],r.prefix),u=t.utils.getName([e,"resolution"],r.prefix),a=t.utils.getName([e,"z"],r.prefix);var s=[t.utils.getControlNumber(u,"Resolution","Resolution of the underlying grid","1","any","0.01"),t.utils.getControlText(a,"Z Property","Property name in points from which z-values will be pulled"),t.utils.getControlText(o,"Breaks","Comma separated list of where to draw contours"),t.utils.getControlInput(l,function(){try{var n=t.utils.getCollection(r,1,1/0),i=t.utils.getFormArray(o,"breaks"),l=t.utils.getFormNumber(u,"resolution"),s=t.utils.getFormString(a,"z"),c=turf.isolines(n,s,l,i);r.showForm();var f={points:n,z:s,resolution:l,breaks:i};r.toolbar.ol3turf.handler.callback(e,c,f)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(n,function(){r.showForm()},"","Cancel")];r.showForm(s,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Create isolines",r)}}}({Control:o,utils:t}||{});var S=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1),o=t.utils.getPolygons(r,1,1)[0],n=turf.kinks(o);if(0===n.features.length)throw new Error("No kinks found.");var i={polygon:o};e.toolbar.ol3turf.handler.callback("kinks",n,i)};return{create:function(r,o){return t.Control.create(r,o,"kinks","Create polygon self-intersections",e)}}}({Control:o,utils:t}||{});var I=function(t){var e="line-distance",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"form"],r.prefix),i=t.utils.getName([e,"ok"],r.prefix),l=t.utils.getName([e,"units"],r.prefix);var u=[t.utils.getControlSelect(l,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(i,function(){try{var o=t.utils.getCollection(r,1,1/0),n=t.utils.getFormString(l,"units"),i=turf.lineDistance(o,n);r.showForm();var u={line:o,units:n};r.toolbar.ol3turf.handler.callback(e,i,u)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(u,n)};return{create:function(o,n){return t.Control.create(o,n,e,"Measure Length",r)}}}({Control:o,utils:t}||{});var E=function(t){var e="line-slice-along",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"form"],r.prefix),i=t.utils.getName([e,"ok"],r.prefix),l=t.utils.getName([e,"start"],r.prefix),u=t.utils.getName([e,"stop"],r.prefix),a=t.utils.getName([e,"units"],r.prefix);var s=[t.utils.getControlNumber(l,"Start","Starting distance along the line","0","any","0"),t.utils.getControlNumber(u,"Stop","Stoping distance along the line","0","any","0"),t.utils.getControlSelect(a,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(i,function(){try{var o=t.utils.getCollection(r,1,1),n=t.utils.getLines(o,1,1)[0],i=t.utils.getFormNumber(l,"start"),s=t.utils.getFormNumber(u,"stop");if(!0!=i<s)throw new Error("Start must be less than stop");var c=t.utils.getFormString(a,"units"),f=turf.lineDistance(n,c);if(i>f)throw new Error("Start must be less than line length");if(s>f)throw new Error("Stop must be less than line length");var g=turf.lineSliceAlong(n,i,s,c);r.showForm();var p={line:n,start:i,stop:s,units:c};r.toolbar.ol3turf.handler.callback(e,g,p)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(s,n)};return{create:function(o,n){return t.Control.create(o,n,e,"Create line slice",r)}}}({Control:o,utils:t}||{});var M=function(t){var e=function(e){var r=t.utils.getCollection(e,2,2),o=t.utils.getPoints(r,2,2),n=o[0],i=o[1],l=turf.midpoint(n,i),u={from:n,to:i};e.toolbar.ol3turf.handler.callback("midpoint",l,u)};return{create:function(r,o){return t.Control.create(r,o,"midpoint","Measure Midpoint",e)}}}({Control:o,utils:t}||{});var O=function(t){var e=function(e){var r=t.utils.getCollection(e,2,1/0),o=r.features.length,n=t.utils.getPoints(r,o,o),i=n[0],l=turf.featureCollection(n.slice(1)),u=turf.nearest(i,l),a={targetPoint:i,points:l};e.toolbar.ol3turf.handler.callback("nearest",u,a)};return{create:function(r,o){return t.Control.create(r,o,"nearest","Find set point nearest to first point",e)}}}({Control:o,utils:t}||{});var z=function(t){var e=function(e){var r=t.utils.getCollection(e,2,2),o=t.utils.getPoints(r,1,1),n=t.utils.getPolygons(r,1,1),i=o[0],l=n[0],u=turf.planepoint(i,l),a={point:i,triangle:l};e.toolbar.ol3turf.handler.callback("planepoint",u,a)};return{create:function(r,o){return t.Control.create(r,o,"planepoint","Triangulate a point in a plane",e)}}}({Control:o,utils:t}||{});var U=function(t){var e="point-grid",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"cell-size"],r.prefix),i=t.utils.getName([e,"form"],r.prefix),l=t.utils.getName([e,"ok"],r.prefix),u=t.utils.getName([e,"units"],r.prefix);var a=[t.utils.getControlNumber(n,"Cell Size","Dimension of cell","1","any","0"),t.utils.getControlSelect(u,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{var o=t.utils.getCollection(r,1,1/0),i=t.utils.getFormNumber(n,"cell size"),l=t.utils.getFormString(u,"units"),a=turf.bbox(o),s=turf.pointGrid(a,i,l);r.showForm();var c={bbox:a,cellSize:i,units:l};r.toolbar.ol3turf.handler.callback(e,s,c)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(a,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Generate Point Grid",r)}}}({Control:o,utils:t}||{});var T=function(t){var e="point-on-line",r=function(r){var o=t.utils.getCollection(r,2,2),n=t.utils.getPoints(o,1,1),i=t.utils.getLines(o,1,1)[0],l=n[0],u=turf.pointOnLine(i,l),a={line:i,point:l};r.toolbar.ol3turf.handler.callback(e,u,a)};return{create:function(o,n){return t.Control.create(o,n,e,"Project point on line",r)}}}({Control:o,utils:t}||{});var j=function(t){var e="point-on-surface",r=function(r){var o=t.utils.getCollection(r,1,1/0),n=turf.pointOnSurface(o),i={fc:o};r.toolbar.ol3turf.handler.callback(e,n,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Measure Point on Surface",r)}}}({Control:o,utils:t}||{});var K=function(t){var e="random",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"count"],r.prefix),i=t.utils.getName([e,"form"],r.prefix),l=t.utils.getName([e,"max-radial-length"],r.prefix),u=t.utils.getName([e,"num-vertices"],r.prefix),a=t.utils.getName([e,"ok"],r.prefix),s=t.utils.getName([e,"type"],r.prefix);var c=[t.utils.getControlSelect(s,"Type",t.utils.getOptionsGeometry()),t.utils.getControlNumber(n,"Count","How many geometries should be generated","1","1","1"),t.utils.getControlNumber(u,"# Vertices","Used only for polygon type","10","1","3"),t.utils.getControlNumber(l,"Max Length","Maximum degrees a polygon can extent outwards from its center (degrees)","10","0.01","0","180"),t.utils.getControlInput(a,function(){try{var o=null,i=t.utils.getCollection(r,0,1/0);0!==i.features.length&&(o=turf.bbox(i));var a=t.utils.getFormInteger(n,"count"),c=t.utils.getFormInteger(l,"maximum radial length"),f=t.utils.getFormInteger(u,"number of vertices"),g=t.utils.getFormString(s,"type"),p={max_radial_length:c,num_vertices:f};null!==o&&(p.bbox=o);var m=turf.random(g,a,p);r.showForm();var h={type:g,count:a,options:p};r.toolbar.ol3turf.handler.callback(e,m,h)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(c,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Create random data",r)}}}({Control:o,utils:t}||{});var G=function(t){var e="sample",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"count"],r.prefix),i=t.utils.getName([e,"form"],r.prefix),l=t.utils.getName([e,"ok"],r.prefix);var u=[t.utils.getControlNumber(n,"Count","Number of random features to sample","1","1","1"),t.utils.getControlInput(l,function(){try{var o=t.utils.getCollection(r,1,1/0),i=t.utils.getFormInteger(n,"count");if(i>o.features.length)throw new Error("Feature count must be greater than sampling count.");var l=turf.sample(o,i);r.showForm();var u={featurecollection:o,num:i};r.toolbar.ol3turf.handler.callback(e,l,u)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(u,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Randomly sample features",r)}}}({Control:o,utils:t}||{});var L=function(t){var e="simplify",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"form"],r.prefix),i=t.utils.getName([e,"ok"],r.prefix),l=t.utils.getName([e,"quality"],r.prefix),u=t.utils.getName([e,"tolerance"],r.prefix);var a=[t.utils.getControlNumber(u,"Tolerance","Simplification tolerance","1","0.01","0"),t.utils.getControlSelect(l,"Quality",t.utils.getOptionsQuality()),t.utils.getControlInput(i,function(){try{var o=t.utils.getCollection(r,1,1/0),n=t.utils.getFormNumber(u,"tolerance"),i="high"===t.utils.getFormString(l,"quality"),a=turf.simplify(o,n,i);r.showForm();var s={feature:o,tolerance:n,highQuality:i};r.toolbar.ol3turf.handler.callback(e,a,s)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(a,n)};return{create:function(o,n){return t.Control.create(o,n,e,"Simplify shape",r)}}}({Control:o,utils:t}||{});var q=function(t){var e="square-grid",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"cell-size"],r.prefix),i=t.utils.getName([e,"form"],r.prefix),l=t.utils.getName([e,"ok"],r.prefix),u=t.utils.getName([e,"units"],r.prefix);var a=[t.utils.getControlNumber(n,"Cell Size","Dimension of cell","1","any","0"),t.utils.getControlSelect(u,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{var o=t.utils.getCollection(r,1,1/0),i=t.utils.getFormNumber(n,"cell size"),l=t.utils.getFormString(u,"units"),a=turf.bbox(o),s=turf.squareGrid(a,i,l);r.showForm();var c={bbox:a,cellSize:i,units:l};r.toolbar.ol3turf.handler.callback(e,s,c)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(a,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Generate Square Grid",r)}}}({Control:o,utils:t}||{});var D=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1/0),o=turf.bbox(r),n=turf.square(o),i=turf.bboxPolygon(n),l={bbox:o};e.toolbar.ol3turf.handler.callback("square",i,l)};return{create:function(r,o){return t.Control.create(r,o,"square","Create Square",e)}}}({Control:o,utils:t}||{});var H=function(t){var e="tag",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"field-property"],r.prefix),i=t.utils.getName([e,"form"],r.prefix),l=t.utils.getName([e,"ok"],r.prefix),u=t.utils.getName([e,"out-field-property"],r.prefix);var a=[t.utils.getControlText(n,"Field","Property in polygons to add to joined point features"),t.utils.getControlText(u,"Out Field","Property in points in which to store joined property from polygons"),t.utils.getControlInput(l,function(){try{var o=t.utils.getCollection(r,2,1/0),i=t.utils.getPoints(o,1,o.features.length-1),l=o.features.length-i.length,a=t.utils.getPolygons(o,l,l),s=t.utils.getFormString(n,"field"),c=t.utils.getFormString(u,"out field"),f=turf.featureCollection(a),g=turf.featureCollection(i),p=turf.tag(g,f,s,c);r.showForm();var m={points:g,polygons:f,field:s,outField:c};r.toolbar.ol3turf.handler.callback(e,p,m)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(a,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Perform spatial join of points and polygons",r)}}}({Control:o,utils:t}||{});var B=function(t){var e=function(e){var r=t.utils.getCollection(e,1,1),o=t.utils.getPolygons(r,1,1)[0],n=turf.tesselate(o),i={polygon:o};e.toolbar.ol3turf.handler.callback("tesselate",n,i)};return{create:function(r,o){return t.Control.create(r,o,"tesselate","Create tesselation",e)}}}({Control:o,utils:t}||{});var A=function(t){var e="tin",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"form"],r.prefix),i=t.utils.getName([e,"ok"],r.prefix),l=t.utils.getName([e,"z"],r.prefix);var u=[t.utils.getControlText(l,"Z","(Optional) Property from which to pull z values"),t.utils.getControlInput(i,function(){try{var o=t.utils.getCollection(r,3,1/0),n=o.features.length,i=t.utils.getPoints(o,n,n);o=turf.featureCollection(i);var u=t.utils.getFormString(l,"z"),a=turf.tin(o,u),s={points:o,z:u};r.toolbar.ol3turf.handler.callback(e,a,s)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(u,n)};return{create:function(o,n){return t.Control.create(o,n,e,"Create TIN",r)}}}({Control:o,utils:t}||{}),R=function(t){function e(){return["collect"]}function r(){return["nearest"]}function o(){return["random","sample"]}function n(){return["hex-grid","point-grid","square-grid","triangle-grid","tesselate"]}function i(){return["isolines","planepoint","tin"]}function l(){return["inside","tag","within"]}function u(){return["distance","line-distance","area","bearing","center-of-mass","center","centroid","midpoint","point-on-surface","envelope","square","circle","along","destination"]}function a(){return["combine","explode","flip","kinks","line-slice-along","point-on-line"]}function s(){return["bezier","buffer","concave","convex","difference","intersect","simplify","union"]}return{aggregation:e,all:function(){var t=[];return t.push.apply(t,["distance","line-distance","area","bearing","center-of-mass","center","centroid","midpoint","point-on-surface","envelope","square","circle","along","destination"]),t.push.apply(t,["bezier","buffer","concave","convex","difference","intersect","simplify","union"]),t.push.apply(t,["combine","explode","flip","kinks","line-slice-along","point-on-line"]),t.push.apply(t,["inside","tag","within"]),t.push.apply(t,["nearest"]),t.push.apply(t,["collect"]),t.push.apply(t,["random","sample"]),t.push.apply(t,["isolines","planepoint","tin"]),t.push.apply(t,["hex-grid","point-grid","square-grid","triangle-grid","tesselate"]),t},classification:r,data:o,grids:n,interpolation:i,joins:l,measurement:u,misc:a,transformation:s}}();const Q={controls:{along:n,area:i,bearing:l,bezier:u,buffer:a,center:s,"center-of-mass":c,centroid:f,circle:g,collect:p,combine:m,concave:h,convex:d,destination:v,difference:C,distance:b,envelope:y,explode:x,flip:N,"hex-grid":w,inside:F,intersect:k,isolines:P,kinks:S,"line-distance":I,"line-slice-along":E,midpoint:M,nearest:O,planepoint:z,"point-grid":U,"point-on-line":T,"point-on-surface":j,popup:r,random:K,sample:G,simplify:L,"square-grid":q,square:D,tag:H,tesselate:B,tin:A,toolbars:R,"triangle-grid":function(t){var e="triangle-grid",r=function(r){var o=t.utils.getName([e,"cancel"],r.prefix),n=t.utils.getName([e,"cell-size"],r.prefix),i=t.utils.getName([e,"form"],r.prefix),l=t.utils.getName([e,"ok"],r.prefix),u=t.utils.getName([e,"units"],r.prefix);var a=[t.utils.getControlNumber(n,"Cell Size","Dimension of cell","1","any","0"),t.utils.getControlSelect(u,"Units",t.utils.getOptionsUnits()),t.utils.getControlInput(l,function(){try{var o=t.utils.getCollection(r,1,1/0),i=t.utils.getFormNumber(n,"cell size"),l=t.utils.getFormString(u,"units"),a=turf.bbox(o),s=turf.triangleGrid(a,i,l);r.showForm();var c={bbox:a,cellSize:i,units:l};r.toolbar.ol3turf.handler.callback(e,s,c)}catch(t){r.showMessage(t)}},"","OK"),t.utils.getControlInput(o,function(){r.showForm()},"","Cancel")];r.showForm(a,i)};return{create:function(o,n){return t.Control.create(o,n,e,"Generate Triangle Grid",r)}}}({Control:o,utils:t}||{}),union:function(t){var e=function(e){var r=t.utils.getCollection(e,2,2),o=t.utils.getPolygons(r,2,2),n=o[0],i=o[1],l=turf.union(n,i),u={poly1:n,poly2:i};e.toolbar.ol3turf.handler.callback("union",l,u)};return{create:function(r,o){return t.Control.create(r,o,"union","Create Union Polygon",e)}}}({Control:o,utils:t}||{}),utils:t,within:function(t){var e=function(e){var r=t.utils.getCollection(e,2,1/0),o=t.utils.getPoints(r,1,r.features.length-1),n=r.features.length-o.length,i=t.utils.getPolygons(r,n,n),l=turf.featureCollection(o),u=turf.featureCollection(i),a=turf.within(l,u);if(0===a.features.length)throw new Error("No points found within.");var s={points:l,polygons:u};e.toolbar.ol3turf.handler.callback("within",a,s)};return{create:function(r,o){return t.Control.create(r,o,"within","Find points within polygons",e)}}}({Control:o,utils:t}||{})},Handler:function(t){var e=function(t){this.toolbar=t};return e.prototype.callback=function(t,e,r){var o=this.toolbar.ol3turf.controls[t];if("area"===t)o.showMessage("area = "+e+" msq");else if("bearing"===t)o.showMessage("bearing = "+e+" degrees");else if("distance"===t)o.showMessage("distance = "+e+" "+r.units);else if("inside"===t){var n="Point is";!1===e&&(n+=" not"),n+=" inside polygon.",o.showMessage(n)}else"line-distance"===t?o.showMessage("length = "+e+" "+r.units):"planepoint"===t?o.showMessage("z = "+e):o.addFeatures(e)},e}(),toolbars:R},V=function(t){var e=this,r=t||{};r.ol3turf=r.ol3turf||{},void 0===r.ol3turf.controls&&(r.ol3turf.controls=Q.toolbars.all()),void 0===r.ol3turf.handler&&(r.ol3turf.handler=new Q.Handler(e)),void 0===r.ol3turf.style&&(r.ol3turf.style="ol3-turf-toolbar"),void 0===r.ol3turf.prefix&&(r.ol3turf.prefix="ol3-turf"),void 0===r.element&&(r.element=document.createElement("div")),""===r.element.className&&(r.element.className=r.ol3turf.style+" ol-unselectable ol-control");var o={};r.ol3turf.controls.forEach(function(t){if(void 0!==Q.controls[t]){var n=Q.controls[t].create(e,r.ol3turf.prefix);o[t]=n,r.element.appendChild(n.element)}}),this.ol3turf={controls:o,element:r.element,handler:r.ol3turf.handler},ol.control.Control.call(this,r)};return ol.inherits(V,ol.control.Control),{toolbars:R,Toolbar:V}});
